<?php
/**
 * HostConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.44) is used. For example, calling `/info` is the same as calling `/v1.44/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.44
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * HostConfig Class Doc Comment
 *
 * @category Class
 * @description Container configuration that depends on the host we are running on
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HostConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HostConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpu_shares' => 'int',
        'memory' => 'int',
        'cgroup_parent' => 'string',
        'blkio_weight' => 'int',
        'blkio_weight_device' => '\OpenAPI\Client\Model\ResourcesBlkioWeightDeviceInner[]',
        'blkio_device_read_bps' => '\OpenAPI\Client\Model\ThrottleDevice[]',
        'blkio_device_write_bps' => '\OpenAPI\Client\Model\ThrottleDevice[]',
        'blkio_device_read_i_ops' => '\OpenAPI\Client\Model\ThrottleDevice[]',
        'blkio_device_write_i_ops' => '\OpenAPI\Client\Model\ThrottleDevice[]',
        'cpu_period' => 'int',
        'cpu_quota' => 'int',
        'cpu_realtime_period' => 'int',
        'cpu_realtime_runtime' => 'int',
        'cpuset_cpus' => 'string',
        'cpuset_mems' => 'string',
        'devices' => '\OpenAPI\Client\Model\DeviceMapping[]',
        'device_cgroup_rules' => 'string[]',
        'device_requests' => '\OpenAPI\Client\Model\DeviceRequest[]',
        'kernel_memory_tcp' => 'int',
        'memory_reservation' => 'int',
        'memory_swap' => 'int',
        'memory_swappiness' => 'int',
        'nano_cpus' => 'int',
        'oom_kill_disable' => 'bool',
        'init' => 'bool',
        'pids_limit' => 'int',
        'ulimits' => '\OpenAPI\Client\Model\ResourcesUlimitsInner[]',
        'cpu_count' => 'int',
        'cpu_percent' => 'int',
        'io_maximum_i_ops' => 'int',
        'io_maximum_bandwidth' => 'int',
        'binds' => 'string[]',
        'container_id_file' => 'string',
        'log_config' => '\OpenAPI\Client\Model\HostConfigAllOfLogConfig',
        'network_mode' => 'string',
        'port_bindings' => 'array<string,\OpenAPI\Client\Model\PortBinding[]>',
        'restart_policy' => '\OpenAPI\Client\Model\RestartPolicy',
        'auto_remove' => 'bool',
        'volume_driver' => 'string',
        'volumes_from' => 'string[]',
        'mounts' => '\OpenAPI\Client\Model\Mount[]',
        'console_size' => 'int[]',
        'annotations' => 'array<string,string>',
        'cap_add' => 'string[]',
        'cap_drop' => 'string[]',
        'cgroupns_mode' => 'string',
        'dns' => 'string[]',
        'dns_options' => 'string[]',
        'dns_search' => 'string[]',
        'extra_hosts' => 'string[]',
        'group_add' => 'string[]',
        'ipc_mode' => 'string',
        'cgroup' => 'string',
        'links' => 'string[]',
        'oom_score_adj' => 'int',
        'pid_mode' => 'string',
        'privileged' => 'bool',
        'publish_all_ports' => 'bool',
        'readonly_rootfs' => 'bool',
        'security_opt' => 'string[]',
        'storage_opt' => 'array<string,string>',
        'tmpfs' => 'array<string,string>',
        'uts_mode' => 'string',
        'userns_mode' => 'string',
        'shm_size' => 'int',
        'sysctls' => 'array<string,string>',
        'runtime' => 'string',
        'isolation' => 'string',
        'masked_paths' => 'string[]',
        'readonly_paths' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cpu_shares' => null,
        'memory' => 'int64',
        'cgroup_parent' => null,
        'blkio_weight' => null,
        'blkio_weight_device' => null,
        'blkio_device_read_bps' => null,
        'blkio_device_write_bps' => null,
        'blkio_device_read_i_ops' => null,
        'blkio_device_write_i_ops' => null,
        'cpu_period' => 'int64',
        'cpu_quota' => 'int64',
        'cpu_realtime_period' => 'int64',
        'cpu_realtime_runtime' => 'int64',
        'cpuset_cpus' => null,
        'cpuset_mems' => null,
        'devices' => null,
        'device_cgroup_rules' => null,
        'device_requests' => null,
        'kernel_memory_tcp' => 'int64',
        'memory_reservation' => 'int64',
        'memory_swap' => 'int64',
        'memory_swappiness' => 'int64',
        'nano_cpus' => 'int64',
        'oom_kill_disable' => null,
        'init' => null,
        'pids_limit' => 'int64',
        'ulimits' => null,
        'cpu_count' => 'int64',
        'cpu_percent' => 'int64',
        'io_maximum_i_ops' => 'int64',
        'io_maximum_bandwidth' => 'int64',
        'binds' => null,
        'container_id_file' => null,
        'log_config' => null,
        'network_mode' => null,
        'port_bindings' => null,
        'restart_policy' => null,
        'auto_remove' => null,
        'volume_driver' => null,
        'volumes_from' => null,
        'mounts' => null,
        'console_size' => null,
        'annotations' => null,
        'cap_add' => null,
        'cap_drop' => null,
        'cgroupns_mode' => null,
        'dns' => null,
        'dns_options' => null,
        'dns_search' => null,
        'extra_hosts' => null,
        'group_add' => null,
        'ipc_mode' => null,
        'cgroup' => null,
        'links' => null,
        'oom_score_adj' => null,
        'pid_mode' => null,
        'privileged' => null,
        'publish_all_ports' => null,
        'readonly_rootfs' => null,
        'security_opt' => null,
        'storage_opt' => null,
        'tmpfs' => null,
        'uts_mode' => null,
        'userns_mode' => null,
        'shm_size' => 'int64',
        'sysctls' => null,
        'runtime' => null,
        'isolation' => null,
        'masked_paths' => null,
        'readonly_paths' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cpu_shares' => false,
        'memory' => false,
        'cgroup_parent' => false,
        'blkio_weight' => false,
        'blkio_weight_device' => false,
        'blkio_device_read_bps' => false,
        'blkio_device_write_bps' => false,
        'blkio_device_read_i_ops' => false,
        'blkio_device_write_i_ops' => false,
        'cpu_period' => false,
        'cpu_quota' => false,
        'cpu_realtime_period' => false,
        'cpu_realtime_runtime' => false,
        'cpuset_cpus' => false,
        'cpuset_mems' => false,
        'devices' => false,
        'device_cgroup_rules' => false,
        'device_requests' => false,
        'kernel_memory_tcp' => false,
        'memory_reservation' => false,
        'memory_swap' => false,
        'memory_swappiness' => false,
        'nano_cpus' => false,
        'oom_kill_disable' => false,
        'init' => true,
        'pids_limit' => true,
        'ulimits' => false,
        'cpu_count' => false,
        'cpu_percent' => false,
        'io_maximum_i_ops' => false,
        'io_maximum_bandwidth' => false,
        'binds' => false,
        'container_id_file' => false,
        'log_config' => false,
        'network_mode' => false,
        'port_bindings' => false,
        'restart_policy' => false,
        'auto_remove' => false,
        'volume_driver' => false,
        'volumes_from' => false,
        'mounts' => false,
        'console_size' => true,
        'annotations' => false,
        'cap_add' => false,
        'cap_drop' => false,
        'cgroupns_mode' => false,
        'dns' => false,
        'dns_options' => false,
        'dns_search' => false,
        'extra_hosts' => false,
        'group_add' => false,
        'ipc_mode' => false,
        'cgroup' => false,
        'links' => false,
        'oom_score_adj' => false,
        'pid_mode' => false,
        'privileged' => false,
        'publish_all_ports' => false,
        'readonly_rootfs' => false,
        'security_opt' => false,
        'storage_opt' => false,
        'tmpfs' => false,
        'uts_mode' => false,
        'userns_mode' => false,
        'shm_size' => false,
        'sysctls' => false,
        'runtime' => false,
        'isolation' => false,
        'masked_paths' => false,
        'readonly_paths' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_shares' => 'CpuShares',
        'memory' => 'Memory',
        'cgroup_parent' => 'CgroupParent',
        'blkio_weight' => 'BlkioWeight',
        'blkio_weight_device' => 'BlkioWeightDevice',
        'blkio_device_read_bps' => 'BlkioDeviceReadBps',
        'blkio_device_write_bps' => 'BlkioDeviceWriteBps',
        'blkio_device_read_i_ops' => 'BlkioDeviceReadIOps',
        'blkio_device_write_i_ops' => 'BlkioDeviceWriteIOps',
        'cpu_period' => 'CpuPeriod',
        'cpu_quota' => 'CpuQuota',
        'cpu_realtime_period' => 'CpuRealtimePeriod',
        'cpu_realtime_runtime' => 'CpuRealtimeRuntime',
        'cpuset_cpus' => 'CpusetCpus',
        'cpuset_mems' => 'CpusetMems',
        'devices' => 'Devices',
        'device_cgroup_rules' => 'DeviceCgroupRules',
        'device_requests' => 'DeviceRequests',
        'kernel_memory_tcp' => 'KernelMemoryTCP',
        'memory_reservation' => 'MemoryReservation',
        'memory_swap' => 'MemorySwap',
        'memory_swappiness' => 'MemorySwappiness',
        'nano_cpus' => 'NanoCpus',
        'oom_kill_disable' => 'OomKillDisable',
        'init' => 'Init',
        'pids_limit' => 'PidsLimit',
        'ulimits' => 'Ulimits',
        'cpu_count' => 'CpuCount',
        'cpu_percent' => 'CpuPercent',
        'io_maximum_i_ops' => 'IOMaximumIOps',
        'io_maximum_bandwidth' => 'IOMaximumBandwidth',
        'binds' => 'Binds',
        'container_id_file' => 'ContainerIDFile',
        'log_config' => 'LogConfig',
        'network_mode' => 'NetworkMode',
        'port_bindings' => 'PortBindings',
        'restart_policy' => 'RestartPolicy',
        'auto_remove' => 'AutoRemove',
        'volume_driver' => 'VolumeDriver',
        'volumes_from' => 'VolumesFrom',
        'mounts' => 'Mounts',
        'console_size' => 'ConsoleSize',
        'annotations' => 'Annotations',
        'cap_add' => 'CapAdd',
        'cap_drop' => 'CapDrop',
        'cgroupns_mode' => 'CgroupnsMode',
        'dns' => 'Dns',
        'dns_options' => 'DnsOptions',
        'dns_search' => 'DnsSearch',
        'extra_hosts' => 'ExtraHosts',
        'group_add' => 'GroupAdd',
        'ipc_mode' => 'IpcMode',
        'cgroup' => 'Cgroup',
        'links' => 'Links',
        'oom_score_adj' => 'OomScoreAdj',
        'pid_mode' => 'PidMode',
        'privileged' => 'Privileged',
        'publish_all_ports' => 'PublishAllPorts',
        'readonly_rootfs' => 'ReadonlyRootfs',
        'security_opt' => 'SecurityOpt',
        'storage_opt' => 'StorageOpt',
        'tmpfs' => 'Tmpfs',
        'uts_mode' => 'UTSMode',
        'userns_mode' => 'UsernsMode',
        'shm_size' => 'ShmSize',
        'sysctls' => 'Sysctls',
        'runtime' => 'Runtime',
        'isolation' => 'Isolation',
        'masked_paths' => 'MaskedPaths',
        'readonly_paths' => 'ReadonlyPaths'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_shares' => 'setCpuShares',
        'memory' => 'setMemory',
        'cgroup_parent' => 'setCgroupParent',
        'blkio_weight' => 'setBlkioWeight',
        'blkio_weight_device' => 'setBlkioWeightDevice',
        'blkio_device_read_bps' => 'setBlkioDeviceReadBps',
        'blkio_device_write_bps' => 'setBlkioDeviceWriteBps',
        'blkio_device_read_i_ops' => 'setBlkioDeviceReadIOps',
        'blkio_device_write_i_ops' => 'setBlkioDeviceWriteIOps',
        'cpu_period' => 'setCpuPeriod',
        'cpu_quota' => 'setCpuQuota',
        'cpu_realtime_period' => 'setCpuRealtimePeriod',
        'cpu_realtime_runtime' => 'setCpuRealtimeRuntime',
        'cpuset_cpus' => 'setCpusetCpus',
        'cpuset_mems' => 'setCpusetMems',
        'devices' => 'setDevices',
        'device_cgroup_rules' => 'setDeviceCgroupRules',
        'device_requests' => 'setDeviceRequests',
        'kernel_memory_tcp' => 'setKernelMemoryTcp',
        'memory_reservation' => 'setMemoryReservation',
        'memory_swap' => 'setMemorySwap',
        'memory_swappiness' => 'setMemorySwappiness',
        'nano_cpus' => 'setNanoCpus',
        'oom_kill_disable' => 'setOomKillDisable',
        'init' => 'setInit',
        'pids_limit' => 'setPidsLimit',
        'ulimits' => 'setUlimits',
        'cpu_count' => 'setCpuCount',
        'cpu_percent' => 'setCpuPercent',
        'io_maximum_i_ops' => 'setIoMaximumIOps',
        'io_maximum_bandwidth' => 'setIoMaximumBandwidth',
        'binds' => 'setBinds',
        'container_id_file' => 'setContainerIdFile',
        'log_config' => 'setLogConfig',
        'network_mode' => 'setNetworkMode',
        'port_bindings' => 'setPortBindings',
        'restart_policy' => 'setRestartPolicy',
        'auto_remove' => 'setAutoRemove',
        'volume_driver' => 'setVolumeDriver',
        'volumes_from' => 'setVolumesFrom',
        'mounts' => 'setMounts',
        'console_size' => 'setConsoleSize',
        'annotations' => 'setAnnotations',
        'cap_add' => 'setCapAdd',
        'cap_drop' => 'setCapDrop',
        'cgroupns_mode' => 'setCgroupnsMode',
        'dns' => 'setDns',
        'dns_options' => 'setDnsOptions',
        'dns_search' => 'setDnsSearch',
        'extra_hosts' => 'setExtraHosts',
        'group_add' => 'setGroupAdd',
        'ipc_mode' => 'setIpcMode',
        'cgroup' => 'setCgroup',
        'links' => 'setLinks',
        'oom_score_adj' => 'setOomScoreAdj',
        'pid_mode' => 'setPidMode',
        'privileged' => 'setPrivileged',
        'publish_all_ports' => 'setPublishAllPorts',
        'readonly_rootfs' => 'setReadonlyRootfs',
        'security_opt' => 'setSecurityOpt',
        'storage_opt' => 'setStorageOpt',
        'tmpfs' => 'setTmpfs',
        'uts_mode' => 'setUtsMode',
        'userns_mode' => 'setUsernsMode',
        'shm_size' => 'setShmSize',
        'sysctls' => 'setSysctls',
        'runtime' => 'setRuntime',
        'isolation' => 'setIsolation',
        'masked_paths' => 'setMaskedPaths',
        'readonly_paths' => 'setReadonlyPaths'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_shares' => 'getCpuShares',
        'memory' => 'getMemory',
        'cgroup_parent' => 'getCgroupParent',
        'blkio_weight' => 'getBlkioWeight',
        'blkio_weight_device' => 'getBlkioWeightDevice',
        'blkio_device_read_bps' => 'getBlkioDeviceReadBps',
        'blkio_device_write_bps' => 'getBlkioDeviceWriteBps',
        'blkio_device_read_i_ops' => 'getBlkioDeviceReadIOps',
        'blkio_device_write_i_ops' => 'getBlkioDeviceWriteIOps',
        'cpu_period' => 'getCpuPeriod',
        'cpu_quota' => 'getCpuQuota',
        'cpu_realtime_period' => 'getCpuRealtimePeriod',
        'cpu_realtime_runtime' => 'getCpuRealtimeRuntime',
        'cpuset_cpus' => 'getCpusetCpus',
        'cpuset_mems' => 'getCpusetMems',
        'devices' => 'getDevices',
        'device_cgroup_rules' => 'getDeviceCgroupRules',
        'device_requests' => 'getDeviceRequests',
        'kernel_memory_tcp' => 'getKernelMemoryTcp',
        'memory_reservation' => 'getMemoryReservation',
        'memory_swap' => 'getMemorySwap',
        'memory_swappiness' => 'getMemorySwappiness',
        'nano_cpus' => 'getNanoCpus',
        'oom_kill_disable' => 'getOomKillDisable',
        'init' => 'getInit',
        'pids_limit' => 'getPidsLimit',
        'ulimits' => 'getUlimits',
        'cpu_count' => 'getCpuCount',
        'cpu_percent' => 'getCpuPercent',
        'io_maximum_i_ops' => 'getIoMaximumIOps',
        'io_maximum_bandwidth' => 'getIoMaximumBandwidth',
        'binds' => 'getBinds',
        'container_id_file' => 'getContainerIdFile',
        'log_config' => 'getLogConfig',
        'network_mode' => 'getNetworkMode',
        'port_bindings' => 'getPortBindings',
        'restart_policy' => 'getRestartPolicy',
        'auto_remove' => 'getAutoRemove',
        'volume_driver' => 'getVolumeDriver',
        'volumes_from' => 'getVolumesFrom',
        'mounts' => 'getMounts',
        'console_size' => 'getConsoleSize',
        'annotations' => 'getAnnotations',
        'cap_add' => 'getCapAdd',
        'cap_drop' => 'getCapDrop',
        'cgroupns_mode' => 'getCgroupnsMode',
        'dns' => 'getDns',
        'dns_options' => 'getDnsOptions',
        'dns_search' => 'getDnsSearch',
        'extra_hosts' => 'getExtraHosts',
        'group_add' => 'getGroupAdd',
        'ipc_mode' => 'getIpcMode',
        'cgroup' => 'getCgroup',
        'links' => 'getLinks',
        'oom_score_adj' => 'getOomScoreAdj',
        'pid_mode' => 'getPidMode',
        'privileged' => 'getPrivileged',
        'publish_all_ports' => 'getPublishAllPorts',
        'readonly_rootfs' => 'getReadonlyRootfs',
        'security_opt' => 'getSecurityOpt',
        'storage_opt' => 'getStorageOpt',
        'tmpfs' => 'getTmpfs',
        'uts_mode' => 'getUtsMode',
        'userns_mode' => 'getUsernsMode',
        'shm_size' => 'getShmSize',
        'sysctls' => 'getSysctls',
        'runtime' => 'getRuntime',
        'isolation' => 'getIsolation',
        'masked_paths' => 'getMaskedPaths',
        'readonly_paths' => 'getReadonlyPaths'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CGROUPNS_MODE__PRIVATE = 'private';
    public const CGROUPNS_MODE_HOST = 'host';
    public const ISOLATION__DEFAULT = 'default';
    public const ISOLATION_PROCESS = 'process';
    public const ISOLATION_HYPERV = 'hyperv';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCgroupnsModeAllowableValues()
    {
        return [
            self::CGROUPNS_MODE__PRIVATE,
            self::CGROUPNS_MODE_HOST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsolationAllowableValues()
    {
        return [
            self::ISOLATION__DEFAULT,
            self::ISOLATION_PROCESS,
            self::ISOLATION_HYPERV,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cpu_shares', $data ?? [], null);
        $this->setIfExists('memory', $data ?? [], 0);
        $this->setIfExists('cgroup_parent', $data ?? [], null);
        $this->setIfExists('blkio_weight', $data ?? [], null);
        $this->setIfExists('blkio_weight_device', $data ?? [], null);
        $this->setIfExists('blkio_device_read_bps', $data ?? [], null);
        $this->setIfExists('blkio_device_write_bps', $data ?? [], null);
        $this->setIfExists('blkio_device_read_i_ops', $data ?? [], null);
        $this->setIfExists('blkio_device_write_i_ops', $data ?? [], null);
        $this->setIfExists('cpu_period', $data ?? [], null);
        $this->setIfExists('cpu_quota', $data ?? [], null);
        $this->setIfExists('cpu_realtime_period', $data ?? [], null);
        $this->setIfExists('cpu_realtime_runtime', $data ?? [], null);
        $this->setIfExists('cpuset_cpus', $data ?? [], null);
        $this->setIfExists('cpuset_mems', $data ?? [], null);
        $this->setIfExists('devices', $data ?? [], null);
        $this->setIfExists('device_cgroup_rules', $data ?? [], null);
        $this->setIfExists('device_requests', $data ?? [], null);
        $this->setIfExists('kernel_memory_tcp', $data ?? [], null);
        $this->setIfExists('memory_reservation', $data ?? [], null);
        $this->setIfExists('memory_swap', $data ?? [], null);
        $this->setIfExists('memory_swappiness', $data ?? [], null);
        $this->setIfExists('nano_cpus', $data ?? [], null);
        $this->setIfExists('oom_kill_disable', $data ?? [], null);
        $this->setIfExists('init', $data ?? [], null);
        $this->setIfExists('pids_limit', $data ?? [], null);
        $this->setIfExists('ulimits', $data ?? [], null);
        $this->setIfExists('cpu_count', $data ?? [], null);
        $this->setIfExists('cpu_percent', $data ?? [], null);
        $this->setIfExists('io_maximum_i_ops', $data ?? [], null);
        $this->setIfExists('io_maximum_bandwidth', $data ?? [], null);
        $this->setIfExists('binds', $data ?? [], null);
        $this->setIfExists('container_id_file', $data ?? [], null);
        $this->setIfExists('log_config', $data ?? [], null);
        $this->setIfExists('network_mode', $data ?? [], null);
        $this->setIfExists('port_bindings', $data ?? [], null);
        $this->setIfExists('restart_policy', $data ?? [], null);
        $this->setIfExists('auto_remove', $data ?? [], null);
        $this->setIfExists('volume_driver', $data ?? [], null);
        $this->setIfExists('volumes_from', $data ?? [], null);
        $this->setIfExists('mounts', $data ?? [], null);
        $this->setIfExists('console_size', $data ?? [], null);
        $this->setIfExists('annotations', $data ?? [], null);
        $this->setIfExists('cap_add', $data ?? [], null);
        $this->setIfExists('cap_drop', $data ?? [], null);
        $this->setIfExists('cgroupns_mode', $data ?? [], null);
        $this->setIfExists('dns', $data ?? [], null);
        $this->setIfExists('dns_options', $data ?? [], null);
        $this->setIfExists('dns_search', $data ?? [], null);
        $this->setIfExists('extra_hosts', $data ?? [], null);
        $this->setIfExists('group_add', $data ?? [], null);
        $this->setIfExists('ipc_mode', $data ?? [], null);
        $this->setIfExists('cgroup', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('oom_score_adj', $data ?? [], null);
        $this->setIfExists('pid_mode', $data ?? [], null);
        $this->setIfExists('privileged', $data ?? [], null);
        $this->setIfExists('publish_all_ports', $data ?? [], null);
        $this->setIfExists('readonly_rootfs', $data ?? [], null);
        $this->setIfExists('security_opt', $data ?? [], null);
        $this->setIfExists('storage_opt', $data ?? [], null);
        $this->setIfExists('tmpfs', $data ?? [], null);
        $this->setIfExists('uts_mode', $data ?? [], null);
        $this->setIfExists('userns_mode', $data ?? [], null);
        $this->setIfExists('shm_size', $data ?? [], null);
        $this->setIfExists('sysctls', $data ?? [], null);
        $this->setIfExists('runtime', $data ?? [], null);
        $this->setIfExists('isolation', $data ?? [], null);
        $this->setIfExists('masked_paths', $data ?? [], null);
        $this->setIfExists('readonly_paths', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['blkio_weight']) && ($this->container['blkio_weight'] > 1000)) {
            $invalidProperties[] = "invalid value for 'blkio_weight', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['blkio_weight']) && ($this->container['blkio_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'blkio_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['memory_swappiness']) && ($this->container['memory_swappiness'] > 100)) {
            $invalidProperties[] = "invalid value for 'memory_swappiness', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['memory_swappiness']) && ($this->container['memory_swappiness'] < 0)) {
            $invalidProperties[] = "invalid value for 'memory_swappiness', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['console_size']) && (count($this->container['console_size']) > 2)) {
            $invalidProperties[] = "invalid value for 'console_size', number of items must be less than or equal to 2.";
        }

        if (!is_null($this->container['console_size']) && (count($this->container['console_size']) < 2)) {
            $invalidProperties[] = "invalid value for 'console_size', number of items must be greater than or equal to 2.";
        }

        $allowedValues = $this->getCgroupnsModeAllowableValues();
        if (!is_null($this->container['cgroupns_mode']) && !in_array($this->container['cgroupns_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cgroupns_mode', must be one of '%s'",
                $this->container['cgroupns_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['shm_size']) && ($this->container['shm_size'] < 0)) {
            $invalidProperties[] = "invalid value for 'shm_size', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getIsolationAllowableValues();
        if (!is_null($this->container['isolation']) && !in_array($this->container['isolation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isolation', must be one of '%s'",
                $this->container['isolation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_shares
     *
     * @return int|null
     */
    public function getCpuShares()
    {
        return $this->container['cpu_shares'];
    }

    /**
     * Sets cpu_shares
     *
     * @param int|null $cpu_shares An integer value representing this container's relative CPU weight versus other containers.
     *
     * @return self
     */
    public function setCpuShares($cpu_shares)
    {
        if (is_null($cpu_shares)) {
            throw new \InvalidArgumentException('non-nullable cpu_shares cannot be null');
        }
        $this->container['cpu_shares'] = $cpu_shares;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int|null
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int|null $memory Memory limit in bytes.
     *
     * @return self
     */
    public function setMemory($memory)
    {
        if (is_null($memory)) {
            throw new \InvalidArgumentException('non-nullable memory cannot be null');
        }
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets cgroup_parent
     *
     * @return string|null
     */
    public function getCgroupParent()
    {
        return $this->container['cgroup_parent'];
    }

    /**
     * Sets cgroup_parent
     *
     * @param string|null $cgroup_parent Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
     *
     * @return self
     */
    public function setCgroupParent($cgroup_parent)
    {
        if (is_null($cgroup_parent)) {
            throw new \InvalidArgumentException('non-nullable cgroup_parent cannot be null');
        }
        $this->container['cgroup_parent'] = $cgroup_parent;

        return $this;
    }

    /**
     * Gets blkio_weight
     *
     * @return int|null
     */
    public function getBlkioWeight()
    {
        return $this->container['blkio_weight'];
    }

    /**
     * Sets blkio_weight
     *
     * @param int|null $blkio_weight Block IO weight (relative weight).
     *
     * @return self
     */
    public function setBlkioWeight($blkio_weight)
    {
        if (is_null($blkio_weight)) {
            throw new \InvalidArgumentException('non-nullable blkio_weight cannot be null');
        }

        if (($blkio_weight > 1000)) {
            throw new \InvalidArgumentException('invalid value for $blkio_weight when calling HostConfig., must be smaller than or equal to 1000.');
        }
        if (($blkio_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $blkio_weight when calling HostConfig., must be bigger than or equal to 0.');
        }

        $this->container['blkio_weight'] = $blkio_weight;

        return $this;
    }

    /**
     * Gets blkio_weight_device
     *
     * @return \OpenAPI\Client\Model\ResourcesBlkioWeightDeviceInner[]|null
     */
    public function getBlkioWeightDevice()
    {
        return $this->container['blkio_weight_device'];
    }

    /**
     * Sets blkio_weight_device
     *
     * @param \OpenAPI\Client\Model\ResourcesBlkioWeightDeviceInner[]|null $blkio_weight_device Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ```
     *
     * @return self
     */
    public function setBlkioWeightDevice($blkio_weight_device)
    {
        if (is_null($blkio_weight_device)) {
            throw new \InvalidArgumentException('non-nullable blkio_weight_device cannot be null');
        }
        $this->container['blkio_weight_device'] = $blkio_weight_device;

        return $this;
    }

    /**
     * Gets blkio_device_read_bps
     *
     * @return \OpenAPI\Client\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceReadBps()
    {
        return $this->container['blkio_device_read_bps'];
    }

    /**
     * Sets blkio_device_read_bps
     *
     * @param \OpenAPI\Client\Model\ThrottleDevice[]|null $blkio_device_read_bps Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
     *
     * @return self
     */
    public function setBlkioDeviceReadBps($blkio_device_read_bps)
    {
        if (is_null($blkio_device_read_bps)) {
            throw new \InvalidArgumentException('non-nullable blkio_device_read_bps cannot be null');
        }
        $this->container['blkio_device_read_bps'] = $blkio_device_read_bps;

        return $this;
    }

    /**
     * Gets blkio_device_write_bps
     *
     * @return \OpenAPI\Client\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceWriteBps()
    {
        return $this->container['blkio_device_write_bps'];
    }

    /**
     * Sets blkio_device_write_bps
     *
     * @param \OpenAPI\Client\Model\ThrottleDevice[]|null $blkio_device_write_bps Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
     *
     * @return self
     */
    public function setBlkioDeviceWriteBps($blkio_device_write_bps)
    {
        if (is_null($blkio_device_write_bps)) {
            throw new \InvalidArgumentException('non-nullable blkio_device_write_bps cannot be null');
        }
        $this->container['blkio_device_write_bps'] = $blkio_device_write_bps;

        return $this;
    }

    /**
     * Gets blkio_device_read_i_ops
     *
     * @return \OpenAPI\Client\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceReadIOps()
    {
        return $this->container['blkio_device_read_i_ops'];
    }

    /**
     * Sets blkio_device_read_i_ops
     *
     * @param \OpenAPI\Client\Model\ThrottleDevice[]|null $blkio_device_read_i_ops Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
     *
     * @return self
     */
    public function setBlkioDeviceReadIOps($blkio_device_read_i_ops)
    {
        if (is_null($blkio_device_read_i_ops)) {
            throw new \InvalidArgumentException('non-nullable blkio_device_read_i_ops cannot be null');
        }
        $this->container['blkio_device_read_i_ops'] = $blkio_device_read_i_ops;

        return $this;
    }

    /**
     * Gets blkio_device_write_i_ops
     *
     * @return \OpenAPI\Client\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceWriteIOps()
    {
        return $this->container['blkio_device_write_i_ops'];
    }

    /**
     * Sets blkio_device_write_i_ops
     *
     * @param \OpenAPI\Client\Model\ThrottleDevice[]|null $blkio_device_write_i_ops Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
     *
     * @return self
     */
    public function setBlkioDeviceWriteIOps($blkio_device_write_i_ops)
    {
        if (is_null($blkio_device_write_i_ops)) {
            throw new \InvalidArgumentException('non-nullable blkio_device_write_i_ops cannot be null');
        }
        $this->container['blkio_device_write_i_ops'] = $blkio_device_write_i_ops;

        return $this;
    }

    /**
     * Gets cpu_period
     *
     * @return int|null
     */
    public function getCpuPeriod()
    {
        return $this->container['cpu_period'];
    }

    /**
     * Sets cpu_period
     *
     * @param int|null $cpu_period The length of a CPU period in microseconds.
     *
     * @return self
     */
    public function setCpuPeriod($cpu_period)
    {
        if (is_null($cpu_period)) {
            throw new \InvalidArgumentException('non-nullable cpu_period cannot be null');
        }
        $this->container['cpu_period'] = $cpu_period;

        return $this;
    }

    /**
     * Gets cpu_quota
     *
     * @return int|null
     */
    public function getCpuQuota()
    {
        return $this->container['cpu_quota'];
    }

    /**
     * Sets cpu_quota
     *
     * @param int|null $cpu_quota Microseconds of CPU time that the container can get in a CPU period.
     *
     * @return self
     */
    public function setCpuQuota($cpu_quota)
    {
        if (is_null($cpu_quota)) {
            throw new \InvalidArgumentException('non-nullable cpu_quota cannot be null');
        }
        $this->container['cpu_quota'] = $cpu_quota;

        return $this;
    }

    /**
     * Gets cpu_realtime_period
     *
     * @return int|null
     */
    public function getCpuRealtimePeriod()
    {
        return $this->container['cpu_realtime_period'];
    }

    /**
     * Sets cpu_realtime_period
     *
     * @param int|null $cpu_realtime_period The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     *
     * @return self
     */
    public function setCpuRealtimePeriod($cpu_realtime_period)
    {
        if (is_null($cpu_realtime_period)) {
            throw new \InvalidArgumentException('non-nullable cpu_realtime_period cannot be null');
        }
        $this->container['cpu_realtime_period'] = $cpu_realtime_period;

        return $this;
    }

    /**
     * Gets cpu_realtime_runtime
     *
     * @return int|null
     */
    public function getCpuRealtimeRuntime()
    {
        return $this->container['cpu_realtime_runtime'];
    }

    /**
     * Sets cpu_realtime_runtime
     *
     * @param int|null $cpu_realtime_runtime The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     *
     * @return self
     */
    public function setCpuRealtimeRuntime($cpu_realtime_runtime)
    {
        if (is_null($cpu_realtime_runtime)) {
            throw new \InvalidArgumentException('non-nullable cpu_realtime_runtime cannot be null');
        }
        $this->container['cpu_realtime_runtime'] = $cpu_realtime_runtime;

        return $this;
    }

    /**
     * Gets cpuset_cpus
     *
     * @return string|null
     */
    public function getCpusetCpus()
    {
        return $this->container['cpuset_cpus'];
    }

    /**
     * Sets cpuset_cpus
     *
     * @param string|null $cpuset_cpus CPUs in which to allow execution (e.g., `0-3`, `0,1`).
     *
     * @return self
     */
    public function setCpusetCpus($cpuset_cpus)
    {
        if (is_null($cpuset_cpus)) {
            throw new \InvalidArgumentException('non-nullable cpuset_cpus cannot be null');
        }
        $this->container['cpuset_cpus'] = $cpuset_cpus;

        return $this;
    }

    /**
     * Gets cpuset_mems
     *
     * @return string|null
     */
    public function getCpusetMems()
    {
        return $this->container['cpuset_mems'];
    }

    /**
     * Sets cpuset_mems
     *
     * @param string|null $cpuset_mems Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
     *
     * @return self
     */
    public function setCpusetMems($cpuset_mems)
    {
        if (is_null($cpuset_mems)) {
            throw new \InvalidArgumentException('non-nullable cpuset_mems cannot be null');
        }
        $this->container['cpuset_mems'] = $cpuset_mems;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return \OpenAPI\Client\Model\DeviceMapping[]|null
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param \OpenAPI\Client\Model\DeviceMapping[]|null $devices A list of devices to add to the container.
     *
     * @return self
     */
    public function setDevices($devices)
    {
        if (is_null($devices)) {
            throw new \InvalidArgumentException('non-nullable devices cannot be null');
        }
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets device_cgroup_rules
     *
     * @return string[]|null
     */
    public function getDeviceCgroupRules()
    {
        return $this->container['device_cgroup_rules'];
    }

    /**
     * Sets device_cgroup_rules
     *
     * @param string[]|null $device_cgroup_rules a list of cgroup rules to apply to the container
     *
     * @return self
     */
    public function setDeviceCgroupRules($device_cgroup_rules)
    {
        if (is_null($device_cgroup_rules)) {
            throw new \InvalidArgumentException('non-nullable device_cgroup_rules cannot be null');
        }
        $this->container['device_cgroup_rules'] = $device_cgroup_rules;

        return $this;
    }

    /**
     * Gets device_requests
     *
     * @return \OpenAPI\Client\Model\DeviceRequest[]|null
     */
    public function getDeviceRequests()
    {
        return $this->container['device_requests'];
    }

    /**
     * Sets device_requests
     *
     * @param \OpenAPI\Client\Model\DeviceRequest[]|null $device_requests A list of requests for devices to be sent to device drivers.
     *
     * @return self
     */
    public function setDeviceRequests($device_requests)
    {
        if (is_null($device_requests)) {
            throw new \InvalidArgumentException('non-nullable device_requests cannot be null');
        }
        $this->container['device_requests'] = $device_requests;

        return $this;
    }

    /**
     * Gets kernel_memory_tcp
     *
     * @return int|null
     */
    public function getKernelMemoryTcp()
    {
        return $this->container['kernel_memory_tcp'];
    }

    /**
     * Sets kernel_memory_tcp
     *
     * @param int|null $kernel_memory_tcp Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty.
     *
     * @return self
     */
    public function setKernelMemoryTcp($kernel_memory_tcp)
    {
        if (is_null($kernel_memory_tcp)) {
            throw new \InvalidArgumentException('non-nullable kernel_memory_tcp cannot be null');
        }
        $this->container['kernel_memory_tcp'] = $kernel_memory_tcp;

        return $this;
    }

    /**
     * Gets memory_reservation
     *
     * @return int|null
     */
    public function getMemoryReservation()
    {
        return $this->container['memory_reservation'];
    }

    /**
     * Sets memory_reservation
     *
     * @param int|null $memory_reservation Memory soft limit in bytes.
     *
     * @return self
     */
    public function setMemoryReservation($memory_reservation)
    {
        if (is_null($memory_reservation)) {
            throw new \InvalidArgumentException('non-nullable memory_reservation cannot be null');
        }
        $this->container['memory_reservation'] = $memory_reservation;

        return $this;
    }

    /**
     * Gets memory_swap
     *
     * @return int|null
     */
    public function getMemorySwap()
    {
        return $this->container['memory_swap'];
    }

    /**
     * Sets memory_swap
     *
     * @param int|null $memory_swap Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
     *
     * @return self
     */
    public function setMemorySwap($memory_swap)
    {
        if (is_null($memory_swap)) {
            throw new \InvalidArgumentException('non-nullable memory_swap cannot be null');
        }
        $this->container['memory_swap'] = $memory_swap;

        return $this;
    }

    /**
     * Gets memory_swappiness
     *
     * @return int|null
     */
    public function getMemorySwappiness()
    {
        return $this->container['memory_swappiness'];
    }

    /**
     * Sets memory_swappiness
     *
     * @param int|null $memory_swappiness Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
     *
     * @return self
     */
    public function setMemorySwappiness($memory_swappiness)
    {
        if (is_null($memory_swappiness)) {
            throw new \InvalidArgumentException('non-nullable memory_swappiness cannot be null');
        }

        if (($memory_swappiness > 100)) {
            throw new \InvalidArgumentException('invalid value for $memory_swappiness when calling HostConfig., must be smaller than or equal to 100.');
        }
        if (($memory_swappiness < 0)) {
            throw new \InvalidArgumentException('invalid value for $memory_swappiness when calling HostConfig., must be bigger than or equal to 0.');
        }

        $this->container['memory_swappiness'] = $memory_swappiness;

        return $this;
    }

    /**
     * Gets nano_cpus
     *
     * @return int|null
     */
    public function getNanoCpus()
    {
        return $this->container['nano_cpus'];
    }

    /**
     * Sets nano_cpus
     *
     * @param int|null $nano_cpus CPU quota in units of 10<sup>-9</sup> CPUs.
     *
     * @return self
     */
    public function setNanoCpus($nano_cpus)
    {
        if (is_null($nano_cpus)) {
            throw new \InvalidArgumentException('non-nullable nano_cpus cannot be null');
        }
        $this->container['nano_cpus'] = $nano_cpus;

        return $this;
    }

    /**
     * Gets oom_kill_disable
     *
     * @return bool|null
     */
    public function getOomKillDisable()
    {
        return $this->container['oom_kill_disable'];
    }

    /**
     * Sets oom_kill_disable
     *
     * @param bool|null $oom_kill_disable Disable OOM Killer for the container.
     *
     * @return self
     */
    public function setOomKillDisable($oom_kill_disable)
    {
        if (is_null($oom_kill_disable)) {
            throw new \InvalidArgumentException('non-nullable oom_kill_disable cannot be null');
        }
        $this->container['oom_kill_disable'] = $oom_kill_disable;

        return $this;
    }

    /**
     * Gets init
     *
     * @return bool|null
     */
    public function getInit()
    {
        return $this->container['init'];
    }

    /**
     * Sets init
     *
     * @param bool|null $init Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
     *
     * @return self
     */
    public function setInit($init)
    {
        if (is_null($init)) {
            array_push($this->openAPINullablesSetToNull, 'init');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('init', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['init'] = $init;

        return $this;
    }

    /**
     * Gets pids_limit
     *
     * @return int|null
     */
    public function getPidsLimit()
    {
        return $this->container['pids_limit'];
    }

    /**
     * Sets pids_limit
     *
     * @param int|null $pids_limit Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.
     *
     * @return self
     */
    public function setPidsLimit($pids_limit)
    {
        if (is_null($pids_limit)) {
            array_push($this->openAPINullablesSetToNull, 'pids_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pids_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pids_limit'] = $pids_limit;

        return $this;
    }

    /**
     * Gets ulimits
     *
     * @return \OpenAPI\Client\Model\ResourcesUlimitsInner[]|null
     */
    public function getUlimits()
    {
        return $this->container['ulimits'];
    }

    /**
     * Sets ulimits
     *
     * @param \OpenAPI\Client\Model\ResourcesUlimitsInner[]|null $ulimits A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ```
     *
     * @return self
     */
    public function setUlimits($ulimits)
    {
        if (is_null($ulimits)) {
            throw new \InvalidArgumentException('non-nullable ulimits cannot be null');
        }
        $this->container['ulimits'] = $ulimits;

        return $this;
    }

    /**
     * Gets cpu_count
     *
     * @return int|null
     */
    public function getCpuCount()
    {
        return $this->container['cpu_count'];
    }

    /**
     * Sets cpu_count
     *
     * @param int|null $cpu_count The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     *
     * @return self
     */
    public function setCpuCount($cpu_count)
    {
        if (is_null($cpu_count)) {
            throw new \InvalidArgumentException('non-nullable cpu_count cannot be null');
        }
        $this->container['cpu_count'] = $cpu_count;

        return $this;
    }

    /**
     * Gets cpu_percent
     *
     * @return int|null
     */
    public function getCpuPercent()
    {
        return $this->container['cpu_percent'];
    }

    /**
     * Sets cpu_percent
     *
     * @param int|null $cpu_percent The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     *
     * @return self
     */
    public function setCpuPercent($cpu_percent)
    {
        if (is_null($cpu_percent)) {
            throw new \InvalidArgumentException('non-nullable cpu_percent cannot be null');
        }
        $this->container['cpu_percent'] = $cpu_percent;

        return $this;
    }

    /**
     * Gets io_maximum_i_ops
     *
     * @return int|null
     */
    public function getIoMaximumIOps()
    {
        return $this->container['io_maximum_i_ops'];
    }

    /**
     * Sets io_maximum_i_ops
     *
     * @param int|null $io_maximum_i_ops Maximum IOps for the container system drive (Windows only)
     *
     * @return self
     */
    public function setIoMaximumIOps($io_maximum_i_ops)
    {
        if (is_null($io_maximum_i_ops)) {
            throw new \InvalidArgumentException('non-nullable io_maximum_i_ops cannot be null');
        }
        $this->container['io_maximum_i_ops'] = $io_maximum_i_ops;

        return $this;
    }

    /**
     * Gets io_maximum_bandwidth
     *
     * @return int|null
     */
    public function getIoMaximumBandwidth()
    {
        return $this->container['io_maximum_bandwidth'];
    }

    /**
     * Sets io_maximum_bandwidth
     *
     * @param int|null $io_maximum_bandwidth Maximum IO in bytes per second for the container system drive (Windows only).
     *
     * @return self
     */
    public function setIoMaximumBandwidth($io_maximum_bandwidth)
    {
        if (is_null($io_maximum_bandwidth)) {
            throw new \InvalidArgumentException('non-nullable io_maximum_bandwidth cannot be null');
        }
        $this->container['io_maximum_bandwidth'] = $io_maximum_bandwidth;

        return $this;
    }

    /**
     * Gets binds
     *
     * @return string[]|null
     */
    public function getBinds()
    {
        return $this->container['binds'];
    }

    /**
     * Sets binds
     *
     * @param string[]|null $binds A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container's processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`.
     *
     * @return self
     */
    public function setBinds($binds)
    {
        if (is_null($binds)) {
            throw new \InvalidArgumentException('non-nullable binds cannot be null');
        }
        $this->container['binds'] = $binds;

        return $this;
    }

    /**
     * Gets container_id_file
     *
     * @return string|null
     */
    public function getContainerIdFile()
    {
        return $this->container['container_id_file'];
    }

    /**
     * Sets container_id_file
     *
     * @param string|null $container_id_file Path to a file where the container ID is written
     *
     * @return self
     */
    public function setContainerIdFile($container_id_file)
    {
        if (is_null($container_id_file)) {
            throw new \InvalidArgumentException('non-nullable container_id_file cannot be null');
        }
        $this->container['container_id_file'] = $container_id_file;

        return $this;
    }

    /**
     * Gets log_config
     *
     * @return \OpenAPI\Client\Model\HostConfigAllOfLogConfig|null
     */
    public function getLogConfig()
    {
        return $this->container['log_config'];
    }

    /**
     * Sets log_config
     *
     * @param \OpenAPI\Client\Model\HostConfigAllOfLogConfig|null $log_config log_config
     *
     * @return self
     */
    public function setLogConfig($log_config)
    {
        if (is_null($log_config)) {
            throw new \InvalidArgumentException('non-nullable log_config cannot be null');
        }
        $this->container['log_config'] = $log_config;

        return $this;
    }

    /**
     * Gets network_mode
     *
     * @return string|null
     */
    public function getNetworkMode()
    {
        return $this->container['network_mode'];
    }

    /**
     * Sets network_mode
     *
     * @param string|null $network_mode Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.
     *
     * @return self
     */
    public function setNetworkMode($network_mode)
    {
        if (is_null($network_mode)) {
            throw new \InvalidArgumentException('non-nullable network_mode cannot be null');
        }
        $this->container['network_mode'] = $network_mode;

        return $this;
    }

    /**
     * Gets port_bindings
     *
     * @return array<string,\OpenAPI\Client\Model\PortBinding[]>|null
     */
    public function getPortBindings()
    {
        return $this->container['port_bindings'];
    }

    /**
     * Sets port_bindings
     *
     * @param array<string,\OpenAPI\Client\Model\PortBinding[]>|null $port_bindings PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for multiple protocols, separate entries are added to the mapping table.
     *
     * @return self
     */
    public function setPortBindings($port_bindings)
    {
        if (is_null($port_bindings)) {
            throw new \InvalidArgumentException('non-nullable port_bindings cannot be null');
        }
        $this->container['port_bindings'] = $port_bindings;

        return $this;
    }

    /**
     * Gets restart_policy
     *
     * @return \OpenAPI\Client\Model\RestartPolicy|null
     */
    public function getRestartPolicy()
    {
        return $this->container['restart_policy'];
    }

    /**
     * Sets restart_policy
     *
     * @param \OpenAPI\Client\Model\RestartPolicy|null $restart_policy restart_policy
     *
     * @return self
     */
    public function setRestartPolicy($restart_policy)
    {
        if (is_null($restart_policy)) {
            throw new \InvalidArgumentException('non-nullable restart_policy cannot be null');
        }
        $this->container['restart_policy'] = $restart_policy;

        return $this;
    }

    /**
     * Gets auto_remove
     *
     * @return bool|null
     */
    public function getAutoRemove()
    {
        return $this->container['auto_remove'];
    }

    /**
     * Sets auto_remove
     *
     * @param bool|null $auto_remove Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.
     *
     * @return self
     */
    public function setAutoRemove($auto_remove)
    {
        if (is_null($auto_remove)) {
            throw new \InvalidArgumentException('non-nullable auto_remove cannot be null');
        }
        $this->container['auto_remove'] = $auto_remove;

        return $this;
    }

    /**
     * Gets volume_driver
     *
     * @return string|null
     */
    public function getVolumeDriver()
    {
        return $this->container['volume_driver'];
    }

    /**
     * Sets volume_driver
     *
     * @param string|null $volume_driver Driver that this container uses to mount volumes.
     *
     * @return self
     */
    public function setVolumeDriver($volume_driver)
    {
        if (is_null($volume_driver)) {
            throw new \InvalidArgumentException('non-nullable volume_driver cannot be null');
        }
        $this->container['volume_driver'] = $volume_driver;

        return $this;
    }

    /**
     * Gets volumes_from
     *
     * @return string[]|null
     */
    public function getVolumesFrom()
    {
        return $this->container['volumes_from'];
    }

    /**
     * Sets volumes_from
     *
     * @param string[]|null $volumes_from A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.
     *
     * @return self
     */
    public function setVolumesFrom($volumes_from)
    {
        if (is_null($volumes_from)) {
            throw new \InvalidArgumentException('non-nullable volumes_from cannot be null');
        }
        $this->container['volumes_from'] = $volumes_from;

        return $this;
    }

    /**
     * Gets mounts
     *
     * @return \OpenAPI\Client\Model\Mount[]|null
     */
    public function getMounts()
    {
        return $this->container['mounts'];
    }

    /**
     * Sets mounts
     *
     * @param \OpenAPI\Client\Model\Mount[]|null $mounts Specification for mounts to be added to the container.
     *
     * @return self
     */
    public function setMounts($mounts)
    {
        if (is_null($mounts)) {
            throw new \InvalidArgumentException('non-nullable mounts cannot be null');
        }
        $this->container['mounts'] = $mounts;

        return $this;
    }

    /**
     * Gets console_size
     *
     * @return int[]|null
     */
    public function getConsoleSize()
    {
        return $this->container['console_size'];
    }

    /**
     * Sets console_size
     *
     * @param int[]|null $console_size Initial console size, as an `[height, width]` array.
     *
     * @return self
     */
    public function setConsoleSize($console_size)
    {
        if (is_null($console_size)) {
            array_push($this->openAPINullablesSetToNull, 'console_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('console_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($console_size) && (count($console_size) > 2)) {
            throw new \InvalidArgumentException('invalid value for $console_size when calling HostConfig., number of items must be less than or equal to 2.');
        }
        if (!is_null($console_size) && (count($console_size) < 2)) {
            throw new \InvalidArgumentException('invalid length for $console_size when calling HostConfig., number of items must be greater than or equal to 2.');
        }
        $this->container['console_size'] = $console_size;

        return $this;
    }

    /**
     * Gets annotations
     *
     * @return array<string,string>|null
     */
    public function getAnnotations()
    {
        return $this->container['annotations'];
    }

    /**
     * Sets annotations
     *
     * @param array<string,string>|null $annotations Arbitrary non-identifying metadata attached to container and provided to the runtime when the container is started.
     *
     * @return self
     */
    public function setAnnotations($annotations)
    {
        if (is_null($annotations)) {
            throw new \InvalidArgumentException('non-nullable annotations cannot be null');
        }
        $this->container['annotations'] = $annotations;

        return $this;
    }

    /**
     * Gets cap_add
     *
     * @return string[]|null
     */
    public function getCapAdd()
    {
        return $this->container['cap_add'];
    }

    /**
     * Sets cap_add
     *
     * @param string[]|null $cap_add A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'.
     *
     * @return self
     */
    public function setCapAdd($cap_add)
    {
        if (is_null($cap_add)) {
            throw new \InvalidArgumentException('non-nullable cap_add cannot be null');
        }
        $this->container['cap_add'] = $cap_add;

        return $this;
    }

    /**
     * Gets cap_drop
     *
     * @return string[]|null
     */
    public function getCapDrop()
    {
        return $this->container['cap_drop'];
    }

    /**
     * Sets cap_drop
     *
     * @param string[]|null $cap_drop A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'.
     *
     * @return self
     */
    public function setCapDrop($cap_drop)
    {
        if (is_null($cap_drop)) {
            throw new \InvalidArgumentException('non-nullable cap_drop cannot be null');
        }
        $this->container['cap_drop'] = $cap_drop;

        return $this;
    }

    /**
     * Gets cgroupns_mode
     *
     * @return string|null
     */
    public function getCgroupnsMode()
    {
        return $this->container['cgroupns_mode'];
    }

    /**
     * Sets cgroupns_mode
     *
     * @param string|null $cgroupns_mode cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration.
     *
     * @return self
     */
    public function setCgroupnsMode($cgroupns_mode)
    {
        if (is_null($cgroupns_mode)) {
            throw new \InvalidArgumentException('non-nullable cgroupns_mode cannot be null');
        }
        $allowedValues = $this->getCgroupnsModeAllowableValues();
        if (!in_array($cgroupns_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cgroupns_mode', must be one of '%s'",
                    $cgroupns_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cgroupns_mode'] = $cgroupns_mode;

        return $this;
    }

    /**
     * Gets dns
     *
     * @return string[]|null
     */
    public function getDns()
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param string[]|null $dns A list of DNS servers for the container to use.
     *
     * @return self
     */
    public function setDns($dns)
    {
        if (is_null($dns)) {
            throw new \InvalidArgumentException('non-nullable dns cannot be null');
        }
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets dns_options
     *
     * @return string[]|null
     */
    public function getDnsOptions()
    {
        return $this->container['dns_options'];
    }

    /**
     * Sets dns_options
     *
     * @param string[]|null $dns_options A list of DNS options.
     *
     * @return self
     */
    public function setDnsOptions($dns_options)
    {
        if (is_null($dns_options)) {
            throw new \InvalidArgumentException('non-nullable dns_options cannot be null');
        }
        $this->container['dns_options'] = $dns_options;

        return $this;
    }

    /**
     * Gets dns_search
     *
     * @return string[]|null
     */
    public function getDnsSearch()
    {
        return $this->container['dns_search'];
    }

    /**
     * Sets dns_search
     *
     * @param string[]|null $dns_search A list of DNS search domains.
     *
     * @return self
     */
    public function setDnsSearch($dns_search)
    {
        if (is_null($dns_search)) {
            throw new \InvalidArgumentException('non-nullable dns_search cannot be null');
        }
        $this->container['dns_search'] = $dns_search;

        return $this;
    }

    /**
     * Gets extra_hosts
     *
     * @return string[]|null
     */
    public function getExtraHosts()
    {
        return $this->container['extra_hosts'];
    }

    /**
     * Sets extra_hosts
     *
     * @param string[]|null $extra_hosts A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.
     *
     * @return self
     */
    public function setExtraHosts($extra_hosts)
    {
        if (is_null($extra_hosts)) {
            throw new \InvalidArgumentException('non-nullable extra_hosts cannot be null');
        }
        $this->container['extra_hosts'] = $extra_hosts;

        return $this;
    }

    /**
     * Gets group_add
     *
     * @return string[]|null
     */
    public function getGroupAdd()
    {
        return $this->container['group_add'];
    }

    /**
     * Sets group_add
     *
     * @param string[]|null $group_add A list of additional groups that the container process will run as.
     *
     * @return self
     */
    public function setGroupAdd($group_add)
    {
        if (is_null($group_add)) {
            throw new \InvalidArgumentException('non-nullable group_add cannot be null');
        }
        $this->container['group_add'] = $group_add;

        return $this;
    }

    /**
     * Gets ipc_mode
     *
     * @return string|null
     */
    public function getIpcMode()
    {
        return $this->container['ipc_mode'];
    }

    /**
     * Sets ipc_mode
     *
     * @param string|null $ipc_mode IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.
     *
     * @return self
     */
    public function setIpcMode($ipc_mode)
    {
        if (is_null($ipc_mode)) {
            throw new \InvalidArgumentException('non-nullable ipc_mode cannot be null');
        }
        $this->container['ipc_mode'] = $ipc_mode;

        return $this;
    }

    /**
     * Gets cgroup
     *
     * @return string|null
     */
    public function getCgroup()
    {
        return $this->container['cgroup'];
    }

    /**
     * Sets cgroup
     *
     * @param string|null $cgroup Cgroup to use for the container.
     *
     * @return self
     */
    public function setCgroup($cgroup)
    {
        if (is_null($cgroup)) {
            throw new \InvalidArgumentException('non-nullable cgroup cannot be null');
        }
        $this->container['cgroup'] = $cgroup;

        return $this;
    }

    /**
     * Gets links
     *
     * @return string[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param string[]|null $links A list of links for the container in the form `container_name:alias`.
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets oom_score_adj
     *
     * @return int|null
     */
    public function getOomScoreAdj()
    {
        return $this->container['oom_score_adj'];
    }

    /**
     * Sets oom_score_adj
     *
     * @param int|null $oom_score_adj An integer value containing the score given to the container in order to tune OOM killer preferences.
     *
     * @return self
     */
    public function setOomScoreAdj($oom_score_adj)
    {
        if (is_null($oom_score_adj)) {
            throw new \InvalidArgumentException('non-nullable oom_score_adj cannot be null');
        }
        $this->container['oom_score_adj'] = $oom_score_adj;

        return $this;
    }

    /**
     * Gets pid_mode
     *
     * @return string|null
     */
    public function getPidMode()
    {
        return $this->container['pid_mode'];
    }

    /**
     * Sets pid_mode
     *
     * @param string|null $pid_mode Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container
     *
     * @return self
     */
    public function setPidMode($pid_mode)
    {
        if (is_null($pid_mode)) {
            throw new \InvalidArgumentException('non-nullable pid_mode cannot be null');
        }
        $this->container['pid_mode'] = $pid_mode;

        return $this;
    }

    /**
     * Gets privileged
     *
     * @return bool|null
     */
    public function getPrivileged()
    {
        return $this->container['privileged'];
    }

    /**
     * Sets privileged
     *
     * @param bool|null $privileged Gives the container full access to the host.
     *
     * @return self
     */
    public function setPrivileged($privileged)
    {
        if (is_null($privileged)) {
            throw new \InvalidArgumentException('non-nullable privileged cannot be null');
        }
        $this->container['privileged'] = $privileged;

        return $this;
    }

    /**
     * Gets publish_all_ports
     *
     * @return bool|null
     */
    public function getPublishAllPorts()
    {
        return $this->container['publish_all_ports'];
    }

    /**
     * Sets publish_all_ports
     *
     * @param bool|null $publish_all_ports Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
     *
     * @return self
     */
    public function setPublishAllPorts($publish_all_ports)
    {
        if (is_null($publish_all_ports)) {
            throw new \InvalidArgumentException('non-nullable publish_all_ports cannot be null');
        }
        $this->container['publish_all_ports'] = $publish_all_ports;

        return $this;
    }

    /**
     * Gets readonly_rootfs
     *
     * @return bool|null
     */
    public function getReadonlyRootfs()
    {
        return $this->container['readonly_rootfs'];
    }

    /**
     * Sets readonly_rootfs
     *
     * @param bool|null $readonly_rootfs Mount the container's root filesystem as read only.
     *
     * @return self
     */
    public function setReadonlyRootfs($readonly_rootfs)
    {
        if (is_null($readonly_rootfs)) {
            throw new \InvalidArgumentException('non-nullable readonly_rootfs cannot be null');
        }
        $this->container['readonly_rootfs'] = $readonly_rootfs;

        return $this;
    }

    /**
     * Gets security_opt
     *
     * @return string[]|null
     */
    public function getSecurityOpt()
    {
        return $this->container['security_opt'];
    }

    /**
     * Sets security_opt
     *
     * @param string[]|null $security_opt A list of string values to customize labels for MLS systems, such as SELinux.
     *
     * @return self
     */
    public function setSecurityOpt($security_opt)
    {
        if (is_null($security_opt)) {
            throw new \InvalidArgumentException('non-nullable security_opt cannot be null');
        }
        $this->container['security_opt'] = $security_opt;

        return $this;
    }

    /**
     * Gets storage_opt
     *
     * @return array<string,string>|null
     */
    public function getStorageOpt()
    {
        return $this->container['storage_opt'];
    }

    /**
     * Sets storage_opt
     *
     * @param array<string,string>|null $storage_opt Storage driver options for this container, in the form `{\"size\": \"120G\"}`.
     *
     * @return self
     */
    public function setStorageOpt($storage_opt)
    {
        if (is_null($storage_opt)) {
            throw new \InvalidArgumentException('non-nullable storage_opt cannot be null');
        }
        $this->container['storage_opt'] = $storage_opt;

        return $this;
    }

    /**
     * Gets tmpfs
     *
     * @return array<string,string>|null
     */
    public function getTmpfs()
    {
        return $this->container['tmpfs'];
    }

    /**
     * Sets tmpfs
     *
     * @param array<string,string>|null $tmpfs A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ```
     *
     * @return self
     */
    public function setTmpfs($tmpfs)
    {
        if (is_null($tmpfs)) {
            throw new \InvalidArgumentException('non-nullable tmpfs cannot be null');
        }
        $this->container['tmpfs'] = $tmpfs;

        return $this;
    }

    /**
     * Gets uts_mode
     *
     * @return string|null
     */
    public function getUtsMode()
    {
        return $this->container['uts_mode'];
    }

    /**
     * Sets uts_mode
     *
     * @param string|null $uts_mode UTS namespace to use for the container.
     *
     * @return self
     */
    public function setUtsMode($uts_mode)
    {
        if (is_null($uts_mode)) {
            throw new \InvalidArgumentException('non-nullable uts_mode cannot be null');
        }
        $this->container['uts_mode'] = $uts_mode;

        return $this;
    }

    /**
     * Gets userns_mode
     *
     * @return string|null
     */
    public function getUsernsMode()
    {
        return $this->container['userns_mode'];
    }

    /**
     * Sets userns_mode
     *
     * @param string|null $userns_mode Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     *
     * @return self
     */
    public function setUsernsMode($userns_mode)
    {
        if (is_null($userns_mode)) {
            throw new \InvalidArgumentException('non-nullable userns_mode cannot be null');
        }
        $this->container['userns_mode'] = $userns_mode;

        return $this;
    }

    /**
     * Gets shm_size
     *
     * @return int|null
     */
    public function getShmSize()
    {
        return $this->container['shm_size'];
    }

    /**
     * Sets shm_size
     *
     * @param int|null $shm_size Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
     *
     * @return self
     */
    public function setShmSize($shm_size)
    {
        if (is_null($shm_size)) {
            throw new \InvalidArgumentException('non-nullable shm_size cannot be null');
        }

        if (($shm_size < 0)) {
            throw new \InvalidArgumentException('invalid value for $shm_size when calling HostConfig., must be bigger than or equal to 0.');
        }

        $this->container['shm_size'] = $shm_size;

        return $this;
    }

    /**
     * Gets sysctls
     *
     * @return array<string,string>|null
     */
    public function getSysctls()
    {
        return $this->container['sysctls'];
    }

    /**
     * Sets sysctls
     *
     * @param array<string,string>|null $sysctls A list of kernel parameters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ```
     *
     * @return self
     */
    public function setSysctls($sysctls)
    {
        if (is_null($sysctls)) {
            throw new \InvalidArgumentException('non-nullable sysctls cannot be null');
        }
        $this->container['sysctls'] = $sysctls;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return string|null
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param string|null $runtime Runtime to use with this container.
     *
     * @return self
     */
    public function setRuntime($runtime)
    {
        if (is_null($runtime)) {
            throw new \InvalidArgumentException('non-nullable runtime cannot be null');
        }
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets isolation
     *
     * @return string|null
     */
    public function getIsolation()
    {
        return $this->container['isolation'];
    }

    /**
     * Sets isolation
     *
     * @param string|null $isolation Isolation technology of the container. (Windows only)
     *
     * @return self
     */
    public function setIsolation($isolation)
    {
        if (is_null($isolation)) {
            throw new \InvalidArgumentException('non-nullable isolation cannot be null');
        }
        $allowedValues = $this->getIsolationAllowableValues();
        if (!in_array($isolation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isolation', must be one of '%s'",
                    $isolation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isolation'] = $isolation;

        return $this;
    }

    /**
     * Gets masked_paths
     *
     * @return string[]|null
     */
    public function getMaskedPaths()
    {
        return $this->container['masked_paths'];
    }

    /**
     * Sets masked_paths
     *
     * @param string[]|null $masked_paths The list of paths to be masked inside the container (this overrides the default set of paths).
     *
     * @return self
     */
    public function setMaskedPaths($masked_paths)
    {
        if (is_null($masked_paths)) {
            throw new \InvalidArgumentException('non-nullable masked_paths cannot be null');
        }
        $this->container['masked_paths'] = $masked_paths;

        return $this;
    }

    /**
     * Gets readonly_paths
     *
     * @return string[]|null
     */
    public function getReadonlyPaths()
    {
        return $this->container['readonly_paths'];
    }

    /**
     * Sets readonly_paths
     *
     * @param string[]|null $readonly_paths The list of paths to be set as read-only inside the container (this overrides the default set of paths).
     *
     * @return self
     */
    public function setReadonlyPaths($readonly_paths)
    {
        if (is_null($readonly_paths)) {
            throw new \InvalidArgumentException('non-nullable readonly_paths cannot be null');
        }
        $this->container['readonly_paths'] = $readonly_paths;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


