<?php
/**
 * Resources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.44) is used. For example, calling `/info` is the same as calling `/v1.44/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.44
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Resources Class Doc Comment
 *
 * @category Class
 * @description A container&#39;s resources (cgroups config, ulimits, etc)
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Resources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpu_shares' => 'int',
        'memory' => 'int',
        'cgroup_parent' => 'string',
        'blkio_weight' => 'int',
        'blkio_weight_device' => '\OpenAPI\Client\Model\ResourcesBlkioWeightDeviceInner[]',
        'blkio_device_read_bps' => '\OpenAPI\Client\Model\ThrottleDevice[]',
        'blkio_device_write_bps' => '\OpenAPI\Client\Model\ThrottleDevice[]',
        'blkio_device_read_i_ops' => '\OpenAPI\Client\Model\ThrottleDevice[]',
        'blkio_device_write_i_ops' => '\OpenAPI\Client\Model\ThrottleDevice[]',
        'cpu_period' => 'int',
        'cpu_quota' => 'int',
        'cpu_realtime_period' => 'int',
        'cpu_realtime_runtime' => 'int',
        'cpuset_cpus' => 'string',
        'cpuset_mems' => 'string',
        'devices' => '\OpenAPI\Client\Model\DeviceMapping[]',
        'device_cgroup_rules' => 'string[]',
        'device_requests' => '\OpenAPI\Client\Model\DeviceRequest[]',
        'kernel_memory_tcp' => 'int',
        'memory_reservation' => 'int',
        'memory_swap' => 'int',
        'memory_swappiness' => 'int',
        'nano_cpus' => 'int',
        'oom_kill_disable' => 'bool',
        'init' => 'bool',
        'pids_limit' => 'int',
        'ulimits' => '\OpenAPI\Client\Model\ResourcesUlimitsInner[]',
        'cpu_count' => 'int',
        'cpu_percent' => 'int',
        'io_maximum_i_ops' => 'int',
        'io_maximum_bandwidth' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cpu_shares' => null,
        'memory' => 'int64',
        'cgroup_parent' => null,
        'blkio_weight' => null,
        'blkio_weight_device' => null,
        'blkio_device_read_bps' => null,
        'blkio_device_write_bps' => null,
        'blkio_device_read_i_ops' => null,
        'blkio_device_write_i_ops' => null,
        'cpu_period' => 'int64',
        'cpu_quota' => 'int64',
        'cpu_realtime_period' => 'int64',
        'cpu_realtime_runtime' => 'int64',
        'cpuset_cpus' => null,
        'cpuset_mems' => null,
        'devices' => null,
        'device_cgroup_rules' => null,
        'device_requests' => null,
        'kernel_memory_tcp' => 'int64',
        'memory_reservation' => 'int64',
        'memory_swap' => 'int64',
        'memory_swappiness' => 'int64',
        'nano_cpus' => 'int64',
        'oom_kill_disable' => null,
        'init' => null,
        'pids_limit' => 'int64',
        'ulimits' => null,
        'cpu_count' => 'int64',
        'cpu_percent' => 'int64',
        'io_maximum_i_ops' => 'int64',
        'io_maximum_bandwidth' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cpu_shares' => false,
        'memory' => false,
        'cgroup_parent' => false,
        'blkio_weight' => false,
        'blkio_weight_device' => false,
        'blkio_device_read_bps' => false,
        'blkio_device_write_bps' => false,
        'blkio_device_read_i_ops' => false,
        'blkio_device_write_i_ops' => false,
        'cpu_period' => false,
        'cpu_quota' => false,
        'cpu_realtime_period' => false,
        'cpu_realtime_runtime' => false,
        'cpuset_cpus' => false,
        'cpuset_mems' => false,
        'devices' => false,
        'device_cgroup_rules' => false,
        'device_requests' => false,
        'kernel_memory_tcp' => false,
        'memory_reservation' => false,
        'memory_swap' => false,
        'memory_swappiness' => false,
        'nano_cpus' => false,
        'oom_kill_disable' => false,
        'init' => true,
        'pids_limit' => true,
        'ulimits' => false,
        'cpu_count' => false,
        'cpu_percent' => false,
        'io_maximum_i_ops' => false,
        'io_maximum_bandwidth' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_shares' => 'CpuShares',
        'memory' => 'Memory',
        'cgroup_parent' => 'CgroupParent',
        'blkio_weight' => 'BlkioWeight',
        'blkio_weight_device' => 'BlkioWeightDevice',
        'blkio_device_read_bps' => 'BlkioDeviceReadBps',
        'blkio_device_write_bps' => 'BlkioDeviceWriteBps',
        'blkio_device_read_i_ops' => 'BlkioDeviceReadIOps',
        'blkio_device_write_i_ops' => 'BlkioDeviceWriteIOps',
        'cpu_period' => 'CpuPeriod',
        'cpu_quota' => 'CpuQuota',
        'cpu_realtime_period' => 'CpuRealtimePeriod',
        'cpu_realtime_runtime' => 'CpuRealtimeRuntime',
        'cpuset_cpus' => 'CpusetCpus',
        'cpuset_mems' => 'CpusetMems',
        'devices' => 'Devices',
        'device_cgroup_rules' => 'DeviceCgroupRules',
        'device_requests' => 'DeviceRequests',
        'kernel_memory_tcp' => 'KernelMemoryTCP',
        'memory_reservation' => 'MemoryReservation',
        'memory_swap' => 'MemorySwap',
        'memory_swappiness' => 'MemorySwappiness',
        'nano_cpus' => 'NanoCpus',
        'oom_kill_disable' => 'OomKillDisable',
        'init' => 'Init',
        'pids_limit' => 'PidsLimit',
        'ulimits' => 'Ulimits',
        'cpu_count' => 'CpuCount',
        'cpu_percent' => 'CpuPercent',
        'io_maximum_i_ops' => 'IOMaximumIOps',
        'io_maximum_bandwidth' => 'IOMaximumBandwidth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_shares' => 'setCpuShares',
        'memory' => 'setMemory',
        'cgroup_parent' => 'setCgroupParent',
        'blkio_weight' => 'setBlkioWeight',
        'blkio_weight_device' => 'setBlkioWeightDevice',
        'blkio_device_read_bps' => 'setBlkioDeviceReadBps',
        'blkio_device_write_bps' => 'setBlkioDeviceWriteBps',
        'blkio_device_read_i_ops' => 'setBlkioDeviceReadIOps',
        'blkio_device_write_i_ops' => 'setBlkioDeviceWriteIOps',
        'cpu_period' => 'setCpuPeriod',
        'cpu_quota' => 'setCpuQuota',
        'cpu_realtime_period' => 'setCpuRealtimePeriod',
        'cpu_realtime_runtime' => 'setCpuRealtimeRuntime',
        'cpuset_cpus' => 'setCpusetCpus',
        'cpuset_mems' => 'setCpusetMems',
        'devices' => 'setDevices',
        'device_cgroup_rules' => 'setDeviceCgroupRules',
        'device_requests' => 'setDeviceRequests',
        'kernel_memory_tcp' => 'setKernelMemoryTcp',
        'memory_reservation' => 'setMemoryReservation',
        'memory_swap' => 'setMemorySwap',
        'memory_swappiness' => 'setMemorySwappiness',
        'nano_cpus' => 'setNanoCpus',
        'oom_kill_disable' => 'setOomKillDisable',
        'init' => 'setInit',
        'pids_limit' => 'setPidsLimit',
        'ulimits' => 'setUlimits',
        'cpu_count' => 'setCpuCount',
        'cpu_percent' => 'setCpuPercent',
        'io_maximum_i_ops' => 'setIoMaximumIOps',
        'io_maximum_bandwidth' => 'setIoMaximumBandwidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_shares' => 'getCpuShares',
        'memory' => 'getMemory',
        'cgroup_parent' => 'getCgroupParent',
        'blkio_weight' => 'getBlkioWeight',
        'blkio_weight_device' => 'getBlkioWeightDevice',
        'blkio_device_read_bps' => 'getBlkioDeviceReadBps',
        'blkio_device_write_bps' => 'getBlkioDeviceWriteBps',
        'blkio_device_read_i_ops' => 'getBlkioDeviceReadIOps',
        'blkio_device_write_i_ops' => 'getBlkioDeviceWriteIOps',
        'cpu_period' => 'getCpuPeriod',
        'cpu_quota' => 'getCpuQuota',
        'cpu_realtime_period' => 'getCpuRealtimePeriod',
        'cpu_realtime_runtime' => 'getCpuRealtimeRuntime',
        'cpuset_cpus' => 'getCpusetCpus',
        'cpuset_mems' => 'getCpusetMems',
        'devices' => 'getDevices',
        'device_cgroup_rules' => 'getDeviceCgroupRules',
        'device_requests' => 'getDeviceRequests',
        'kernel_memory_tcp' => 'getKernelMemoryTcp',
        'memory_reservation' => 'getMemoryReservation',
        'memory_swap' => 'getMemorySwap',
        'memory_swappiness' => 'getMemorySwappiness',
        'nano_cpus' => 'getNanoCpus',
        'oom_kill_disable' => 'getOomKillDisable',
        'init' => 'getInit',
        'pids_limit' => 'getPidsLimit',
        'ulimits' => 'getUlimits',
        'cpu_count' => 'getCpuCount',
        'cpu_percent' => 'getCpuPercent',
        'io_maximum_i_ops' => 'getIoMaximumIOps',
        'io_maximum_bandwidth' => 'getIoMaximumBandwidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cpu_shares', $data ?? [], null);
        $this->setIfExists('memory', $data ?? [], 0);
        $this->setIfExists('cgroup_parent', $data ?? [], null);
        $this->setIfExists('blkio_weight', $data ?? [], null);
        $this->setIfExists('blkio_weight_device', $data ?? [], null);
        $this->setIfExists('blkio_device_read_bps', $data ?? [], null);
        $this->setIfExists('blkio_device_write_bps', $data ?? [], null);
        $this->setIfExists('blkio_device_read_i_ops', $data ?? [], null);
        $this->setIfExists('blkio_device_write_i_ops', $data ?? [], null);
        $this->setIfExists('cpu_period', $data ?? [], null);
        $this->setIfExists('cpu_quota', $data ?? [], null);
        $this->setIfExists('cpu_realtime_period', $data ?? [], null);
        $this->setIfExists('cpu_realtime_runtime', $data ?? [], null);
        $this->setIfExists('cpuset_cpus', $data ?? [], null);
        $this->setIfExists('cpuset_mems', $data ?? [], null);
        $this->setIfExists('devices', $data ?? [], null);
        $this->setIfExists('device_cgroup_rules', $data ?? [], null);
        $this->setIfExists('device_requests', $data ?? [], null);
        $this->setIfExists('kernel_memory_tcp', $data ?? [], null);
        $this->setIfExists('memory_reservation', $data ?? [], null);
        $this->setIfExists('memory_swap', $data ?? [], null);
        $this->setIfExists('memory_swappiness', $data ?? [], null);
        $this->setIfExists('nano_cpus', $data ?? [], null);
        $this->setIfExists('oom_kill_disable', $data ?? [], null);
        $this->setIfExists('init', $data ?? [], null);
        $this->setIfExists('pids_limit', $data ?? [], null);
        $this->setIfExists('ulimits', $data ?? [], null);
        $this->setIfExists('cpu_count', $data ?? [], null);
        $this->setIfExists('cpu_percent', $data ?? [], null);
        $this->setIfExists('io_maximum_i_ops', $data ?? [], null);
        $this->setIfExists('io_maximum_bandwidth', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['blkio_weight']) && ($this->container['blkio_weight'] > 1000)) {
            $invalidProperties[] = "invalid value for 'blkio_weight', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['blkio_weight']) && ($this->container['blkio_weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'blkio_weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['memory_swappiness']) && ($this->container['memory_swappiness'] > 100)) {
            $invalidProperties[] = "invalid value for 'memory_swappiness', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['memory_swappiness']) && ($this->container['memory_swappiness'] < 0)) {
            $invalidProperties[] = "invalid value for 'memory_swappiness', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_shares
     *
     * @return int|null
     */
    public function getCpuShares()
    {
        return $this->container['cpu_shares'];
    }

    /**
     * Sets cpu_shares
     *
     * @param int|null $cpu_shares An integer value representing this container's relative CPU weight versus other containers.
     *
     * @return self
     */
    public function setCpuShares($cpu_shares)
    {
        if (is_null($cpu_shares)) {
            throw new \InvalidArgumentException('non-nullable cpu_shares cannot be null');
        }
        $this->container['cpu_shares'] = $cpu_shares;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int|null
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int|null $memory Memory limit in bytes.
     *
     * @return self
     */
    public function setMemory($memory)
    {
        if (is_null($memory)) {
            throw new \InvalidArgumentException('non-nullable memory cannot be null');
        }
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets cgroup_parent
     *
     * @return string|null
     */
    public function getCgroupParent()
    {
        return $this->container['cgroup_parent'];
    }

    /**
     * Sets cgroup_parent
     *
     * @param string|null $cgroup_parent Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
     *
     * @return self
     */
    public function setCgroupParent($cgroup_parent)
    {
        if (is_null($cgroup_parent)) {
            throw new \InvalidArgumentException('non-nullable cgroup_parent cannot be null');
        }
        $this->container['cgroup_parent'] = $cgroup_parent;

        return $this;
    }

    /**
     * Gets blkio_weight
     *
     * @return int|null
     */
    public function getBlkioWeight()
    {
        return $this->container['blkio_weight'];
    }

    /**
     * Sets blkio_weight
     *
     * @param int|null $blkio_weight Block IO weight (relative weight).
     *
     * @return self
     */
    public function setBlkioWeight($blkio_weight)
    {
        if (is_null($blkio_weight)) {
            throw new \InvalidArgumentException('non-nullable blkio_weight cannot be null');
        }

        if (($blkio_weight > 1000)) {
            throw new \InvalidArgumentException('invalid value for $blkio_weight when calling Resources., must be smaller than or equal to 1000.');
        }
        if (($blkio_weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $blkio_weight when calling Resources., must be bigger than or equal to 0.');
        }

        $this->container['blkio_weight'] = $blkio_weight;

        return $this;
    }

    /**
     * Gets blkio_weight_device
     *
     * @return \OpenAPI\Client\Model\ResourcesBlkioWeightDeviceInner[]|null
     */
    public function getBlkioWeightDevice()
    {
        return $this->container['blkio_weight_device'];
    }

    /**
     * Sets blkio_weight_device
     *
     * @param \OpenAPI\Client\Model\ResourcesBlkioWeightDeviceInner[]|null $blkio_weight_device Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ```
     *
     * @return self
     */
    public function setBlkioWeightDevice($blkio_weight_device)
    {
        if (is_null($blkio_weight_device)) {
            throw new \InvalidArgumentException('non-nullable blkio_weight_device cannot be null');
        }
        $this->container['blkio_weight_device'] = $blkio_weight_device;

        return $this;
    }

    /**
     * Gets blkio_device_read_bps
     *
     * @return \OpenAPI\Client\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceReadBps()
    {
        return $this->container['blkio_device_read_bps'];
    }

    /**
     * Sets blkio_device_read_bps
     *
     * @param \OpenAPI\Client\Model\ThrottleDevice[]|null $blkio_device_read_bps Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
     *
     * @return self
     */
    public function setBlkioDeviceReadBps($blkio_device_read_bps)
    {
        if (is_null($blkio_device_read_bps)) {
            throw new \InvalidArgumentException('non-nullable blkio_device_read_bps cannot be null');
        }
        $this->container['blkio_device_read_bps'] = $blkio_device_read_bps;

        return $this;
    }

    /**
     * Gets blkio_device_write_bps
     *
     * @return \OpenAPI\Client\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceWriteBps()
    {
        return $this->container['blkio_device_write_bps'];
    }

    /**
     * Sets blkio_device_write_bps
     *
     * @param \OpenAPI\Client\Model\ThrottleDevice[]|null $blkio_device_write_bps Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
     *
     * @return self
     */
    public function setBlkioDeviceWriteBps($blkio_device_write_bps)
    {
        if (is_null($blkio_device_write_bps)) {
            throw new \InvalidArgumentException('non-nullable blkio_device_write_bps cannot be null');
        }
        $this->container['blkio_device_write_bps'] = $blkio_device_write_bps;

        return $this;
    }

    /**
     * Gets blkio_device_read_i_ops
     *
     * @return \OpenAPI\Client\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceReadIOps()
    {
        return $this->container['blkio_device_read_i_ops'];
    }

    /**
     * Sets blkio_device_read_i_ops
     *
     * @param \OpenAPI\Client\Model\ThrottleDevice[]|null $blkio_device_read_i_ops Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
     *
     * @return self
     */
    public function setBlkioDeviceReadIOps($blkio_device_read_i_ops)
    {
        if (is_null($blkio_device_read_i_ops)) {
            throw new \InvalidArgumentException('non-nullable blkio_device_read_i_ops cannot be null');
        }
        $this->container['blkio_device_read_i_ops'] = $blkio_device_read_i_ops;

        return $this;
    }

    /**
     * Gets blkio_device_write_i_ops
     *
     * @return \OpenAPI\Client\Model\ThrottleDevice[]|null
     */
    public function getBlkioDeviceWriteIOps()
    {
        return $this->container['blkio_device_write_i_ops'];
    }

    /**
     * Sets blkio_device_write_i_ops
     *
     * @param \OpenAPI\Client\Model\ThrottleDevice[]|null $blkio_device_write_i_ops Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
     *
     * @return self
     */
    public function setBlkioDeviceWriteIOps($blkio_device_write_i_ops)
    {
        if (is_null($blkio_device_write_i_ops)) {
            throw new \InvalidArgumentException('non-nullable blkio_device_write_i_ops cannot be null');
        }
        $this->container['blkio_device_write_i_ops'] = $blkio_device_write_i_ops;

        return $this;
    }

    /**
     * Gets cpu_period
     *
     * @return int|null
     */
    public function getCpuPeriod()
    {
        return $this->container['cpu_period'];
    }

    /**
     * Sets cpu_period
     *
     * @param int|null $cpu_period The length of a CPU period in microseconds.
     *
     * @return self
     */
    public function setCpuPeriod($cpu_period)
    {
        if (is_null($cpu_period)) {
            throw new \InvalidArgumentException('non-nullable cpu_period cannot be null');
        }
        $this->container['cpu_period'] = $cpu_period;

        return $this;
    }

    /**
     * Gets cpu_quota
     *
     * @return int|null
     */
    public function getCpuQuota()
    {
        return $this->container['cpu_quota'];
    }

    /**
     * Sets cpu_quota
     *
     * @param int|null $cpu_quota Microseconds of CPU time that the container can get in a CPU period.
     *
     * @return self
     */
    public function setCpuQuota($cpu_quota)
    {
        if (is_null($cpu_quota)) {
            throw new \InvalidArgumentException('non-nullable cpu_quota cannot be null');
        }
        $this->container['cpu_quota'] = $cpu_quota;

        return $this;
    }

    /**
     * Gets cpu_realtime_period
     *
     * @return int|null
     */
    public function getCpuRealtimePeriod()
    {
        return $this->container['cpu_realtime_period'];
    }

    /**
     * Sets cpu_realtime_period
     *
     * @param int|null $cpu_realtime_period The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     *
     * @return self
     */
    public function setCpuRealtimePeriod($cpu_realtime_period)
    {
        if (is_null($cpu_realtime_period)) {
            throw new \InvalidArgumentException('non-nullable cpu_realtime_period cannot be null');
        }
        $this->container['cpu_realtime_period'] = $cpu_realtime_period;

        return $this;
    }

    /**
     * Gets cpu_realtime_runtime
     *
     * @return int|null
     */
    public function getCpuRealtimeRuntime()
    {
        return $this->container['cpu_realtime_runtime'];
    }

    /**
     * Sets cpu_realtime_runtime
     *
     * @param int|null $cpu_realtime_runtime The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     *
     * @return self
     */
    public function setCpuRealtimeRuntime($cpu_realtime_runtime)
    {
        if (is_null($cpu_realtime_runtime)) {
            throw new \InvalidArgumentException('non-nullable cpu_realtime_runtime cannot be null');
        }
        $this->container['cpu_realtime_runtime'] = $cpu_realtime_runtime;

        return $this;
    }

    /**
     * Gets cpuset_cpus
     *
     * @return string|null
     */
    public function getCpusetCpus()
    {
        return $this->container['cpuset_cpus'];
    }

    /**
     * Sets cpuset_cpus
     *
     * @param string|null $cpuset_cpus CPUs in which to allow execution (e.g., `0-3`, `0,1`).
     *
     * @return self
     */
    public function setCpusetCpus($cpuset_cpus)
    {
        if (is_null($cpuset_cpus)) {
            throw new \InvalidArgumentException('non-nullable cpuset_cpus cannot be null');
        }
        $this->container['cpuset_cpus'] = $cpuset_cpus;

        return $this;
    }

    /**
     * Gets cpuset_mems
     *
     * @return string|null
     */
    public function getCpusetMems()
    {
        return $this->container['cpuset_mems'];
    }

    /**
     * Sets cpuset_mems
     *
     * @param string|null $cpuset_mems Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
     *
     * @return self
     */
    public function setCpusetMems($cpuset_mems)
    {
        if (is_null($cpuset_mems)) {
            throw new \InvalidArgumentException('non-nullable cpuset_mems cannot be null');
        }
        $this->container['cpuset_mems'] = $cpuset_mems;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return \OpenAPI\Client\Model\DeviceMapping[]|null
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param \OpenAPI\Client\Model\DeviceMapping[]|null $devices A list of devices to add to the container.
     *
     * @return self
     */
    public function setDevices($devices)
    {
        if (is_null($devices)) {
            throw new \InvalidArgumentException('non-nullable devices cannot be null');
        }
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets device_cgroup_rules
     *
     * @return string[]|null
     */
    public function getDeviceCgroupRules()
    {
        return $this->container['device_cgroup_rules'];
    }

    /**
     * Sets device_cgroup_rules
     *
     * @param string[]|null $device_cgroup_rules a list of cgroup rules to apply to the container
     *
     * @return self
     */
    public function setDeviceCgroupRules($device_cgroup_rules)
    {
        if (is_null($device_cgroup_rules)) {
            throw new \InvalidArgumentException('non-nullable device_cgroup_rules cannot be null');
        }
        $this->container['device_cgroup_rules'] = $device_cgroup_rules;

        return $this;
    }

    /**
     * Gets device_requests
     *
     * @return \OpenAPI\Client\Model\DeviceRequest[]|null
     */
    public function getDeviceRequests()
    {
        return $this->container['device_requests'];
    }

    /**
     * Sets device_requests
     *
     * @param \OpenAPI\Client\Model\DeviceRequest[]|null $device_requests A list of requests for devices to be sent to device drivers.
     *
     * @return self
     */
    public function setDeviceRequests($device_requests)
    {
        if (is_null($device_requests)) {
            throw new \InvalidArgumentException('non-nullable device_requests cannot be null');
        }
        $this->container['device_requests'] = $device_requests;

        return $this;
    }

    /**
     * Gets kernel_memory_tcp
     *
     * @return int|null
     */
    public function getKernelMemoryTcp()
    {
        return $this->container['kernel_memory_tcp'];
    }

    /**
     * Sets kernel_memory_tcp
     *
     * @param int|null $kernel_memory_tcp Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty.
     *
     * @return self
     */
    public function setKernelMemoryTcp($kernel_memory_tcp)
    {
        if (is_null($kernel_memory_tcp)) {
            throw new \InvalidArgumentException('non-nullable kernel_memory_tcp cannot be null');
        }
        $this->container['kernel_memory_tcp'] = $kernel_memory_tcp;

        return $this;
    }

    /**
     * Gets memory_reservation
     *
     * @return int|null
     */
    public function getMemoryReservation()
    {
        return $this->container['memory_reservation'];
    }

    /**
     * Sets memory_reservation
     *
     * @param int|null $memory_reservation Memory soft limit in bytes.
     *
     * @return self
     */
    public function setMemoryReservation($memory_reservation)
    {
        if (is_null($memory_reservation)) {
            throw new \InvalidArgumentException('non-nullable memory_reservation cannot be null');
        }
        $this->container['memory_reservation'] = $memory_reservation;

        return $this;
    }

    /**
     * Gets memory_swap
     *
     * @return int|null
     */
    public function getMemorySwap()
    {
        return $this->container['memory_swap'];
    }

    /**
     * Sets memory_swap
     *
     * @param int|null $memory_swap Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
     *
     * @return self
     */
    public function setMemorySwap($memory_swap)
    {
        if (is_null($memory_swap)) {
            throw new \InvalidArgumentException('non-nullable memory_swap cannot be null');
        }
        $this->container['memory_swap'] = $memory_swap;

        return $this;
    }

    /**
     * Gets memory_swappiness
     *
     * @return int|null
     */
    public function getMemorySwappiness()
    {
        return $this->container['memory_swappiness'];
    }

    /**
     * Sets memory_swappiness
     *
     * @param int|null $memory_swappiness Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
     *
     * @return self
     */
    public function setMemorySwappiness($memory_swappiness)
    {
        if (is_null($memory_swappiness)) {
            throw new \InvalidArgumentException('non-nullable memory_swappiness cannot be null');
        }

        if (($memory_swappiness > 100)) {
            throw new \InvalidArgumentException('invalid value for $memory_swappiness when calling Resources., must be smaller than or equal to 100.');
        }
        if (($memory_swappiness < 0)) {
            throw new \InvalidArgumentException('invalid value for $memory_swappiness when calling Resources., must be bigger than or equal to 0.');
        }

        $this->container['memory_swappiness'] = $memory_swappiness;

        return $this;
    }

    /**
     * Gets nano_cpus
     *
     * @return int|null
     */
    public function getNanoCpus()
    {
        return $this->container['nano_cpus'];
    }

    /**
     * Sets nano_cpus
     *
     * @param int|null $nano_cpus CPU quota in units of 10<sup>-9</sup> CPUs.
     *
     * @return self
     */
    public function setNanoCpus($nano_cpus)
    {
        if (is_null($nano_cpus)) {
            throw new \InvalidArgumentException('non-nullable nano_cpus cannot be null');
        }
        $this->container['nano_cpus'] = $nano_cpus;

        return $this;
    }

    /**
     * Gets oom_kill_disable
     *
     * @return bool|null
     */
    public function getOomKillDisable()
    {
        return $this->container['oom_kill_disable'];
    }

    /**
     * Sets oom_kill_disable
     *
     * @param bool|null $oom_kill_disable Disable OOM Killer for the container.
     *
     * @return self
     */
    public function setOomKillDisable($oom_kill_disable)
    {
        if (is_null($oom_kill_disable)) {
            throw new \InvalidArgumentException('non-nullable oom_kill_disable cannot be null');
        }
        $this->container['oom_kill_disable'] = $oom_kill_disable;

        return $this;
    }

    /**
     * Gets init
     *
     * @return bool|null
     */
    public function getInit()
    {
        return $this->container['init'];
    }

    /**
     * Sets init
     *
     * @param bool|null $init Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
     *
     * @return self
     */
    public function setInit($init)
    {
        if (is_null($init)) {
            array_push($this->openAPINullablesSetToNull, 'init');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('init', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['init'] = $init;

        return $this;
    }

    /**
     * Gets pids_limit
     *
     * @return int|null
     */
    public function getPidsLimit()
    {
        return $this->container['pids_limit'];
    }

    /**
     * Sets pids_limit
     *
     * @param int|null $pids_limit Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.
     *
     * @return self
     */
    public function setPidsLimit($pids_limit)
    {
        if (is_null($pids_limit)) {
            array_push($this->openAPINullablesSetToNull, 'pids_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pids_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pids_limit'] = $pids_limit;

        return $this;
    }

    /**
     * Gets ulimits
     *
     * @return \OpenAPI\Client\Model\ResourcesUlimitsInner[]|null
     */
    public function getUlimits()
    {
        return $this->container['ulimits'];
    }

    /**
     * Sets ulimits
     *
     * @param \OpenAPI\Client\Model\ResourcesUlimitsInner[]|null $ulimits A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ```
     *
     * @return self
     */
    public function setUlimits($ulimits)
    {
        if (is_null($ulimits)) {
            throw new \InvalidArgumentException('non-nullable ulimits cannot be null');
        }
        $this->container['ulimits'] = $ulimits;

        return $this;
    }

    /**
     * Gets cpu_count
     *
     * @return int|null
     */
    public function getCpuCount()
    {
        return $this->container['cpu_count'];
    }

    /**
     * Sets cpu_count
     *
     * @param int|null $cpu_count The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     *
     * @return self
     */
    public function setCpuCount($cpu_count)
    {
        if (is_null($cpu_count)) {
            throw new \InvalidArgumentException('non-nullable cpu_count cannot be null');
        }
        $this->container['cpu_count'] = $cpu_count;

        return $this;
    }

    /**
     * Gets cpu_percent
     *
     * @return int|null
     */
    public function getCpuPercent()
    {
        return $this->container['cpu_percent'];
    }

    /**
     * Sets cpu_percent
     *
     * @param int|null $cpu_percent The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     *
     * @return self
     */
    public function setCpuPercent($cpu_percent)
    {
        if (is_null($cpu_percent)) {
            throw new \InvalidArgumentException('non-nullable cpu_percent cannot be null');
        }
        $this->container['cpu_percent'] = $cpu_percent;

        return $this;
    }

    /**
     * Gets io_maximum_i_ops
     *
     * @return int|null
     */
    public function getIoMaximumIOps()
    {
        return $this->container['io_maximum_i_ops'];
    }

    /**
     * Sets io_maximum_i_ops
     *
     * @param int|null $io_maximum_i_ops Maximum IOps for the container system drive (Windows only)
     *
     * @return self
     */
    public function setIoMaximumIOps($io_maximum_i_ops)
    {
        if (is_null($io_maximum_i_ops)) {
            throw new \InvalidArgumentException('non-nullable io_maximum_i_ops cannot be null');
        }
        $this->container['io_maximum_i_ops'] = $io_maximum_i_ops;

        return $this;
    }

    /**
     * Gets io_maximum_bandwidth
     *
     * @return int|null
     */
    public function getIoMaximumBandwidth()
    {
        return $this->container['io_maximum_bandwidth'];
    }

    /**
     * Sets io_maximum_bandwidth
     *
     * @param int|null $io_maximum_bandwidth Maximum IO in bytes per second for the container system drive (Windows only).
     *
     * @return self
     */
    public function setIoMaximumBandwidth($io_maximum_bandwidth)
    {
        if (is_null($io_maximum_bandwidth)) {
            throw new \InvalidArgumentException('non-nullable io_maximum_bandwidth cannot be null');
        }
        $this->container['io_maximum_bandwidth'] = $io_maximum_bandwidth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


