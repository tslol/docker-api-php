<?php
/**
 * TaskSpecContainerSpec
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.44) is used. For example, calling `/info` is the same as calling `/v1.44/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.44
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaskSpecContainerSpec Class Doc Comment
 *
 * @category Class
 * @description Container spec for the service.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are &gt; mutually exclusive. PluginSpec is only used when the Runtime field &gt; is set to &#x60;plugin&#x60;. NetworkAttachmentSpec is used when the Runtime &gt; field is set to &#x60;attachment&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskSpecContainerSpec implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskSpec_ContainerSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'image' => 'string',
        'labels' => 'array<string,string>',
        'command' => 'string[]',
        'args' => 'string[]',
        'hostname' => 'string',
        'env' => 'string[]',
        'dir' => 'string',
        'user' => 'string',
        'groups' => 'string[]',
        'privileges' => '\OpenAPI\Client\Model\TaskSpecContainerSpecPrivileges',
        'tty' => 'bool',
        'open_stdin' => 'bool',
        'read_only' => 'bool',
        'mounts' => '\OpenAPI\Client\Model\Mount[]',
        'stop_signal' => 'string',
        'stop_grace_period' => 'int',
        'health_check' => '\OpenAPI\Client\Model\HealthConfig',
        'hosts' => 'string[]',
        'dns_config' => '\OpenAPI\Client\Model\TaskSpecContainerSpecDNSConfig',
        'secrets' => '\OpenAPI\Client\Model\TaskSpecContainerSpecSecretsInner[]',
        'configs' => '\OpenAPI\Client\Model\TaskSpecContainerSpecConfigsInner[]',
        'isolation' => 'string',
        'init' => 'bool',
        'sysctls' => 'array<string,string>',
        'capability_add' => 'string[]',
        'capability_drop' => 'string[]',
        'ulimits' => '\OpenAPI\Client\Model\ResourcesUlimitsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'image' => null,
        'labels' => null,
        'command' => null,
        'args' => null,
        'hostname' => null,
        'env' => null,
        'dir' => null,
        'user' => null,
        'groups' => null,
        'privileges' => null,
        'tty' => null,
        'open_stdin' => null,
        'read_only' => null,
        'mounts' => null,
        'stop_signal' => null,
        'stop_grace_period' => 'int64',
        'health_check' => null,
        'hosts' => null,
        'dns_config' => null,
        'secrets' => null,
        'configs' => null,
        'isolation' => null,
        'init' => null,
        'sysctls' => null,
        'capability_add' => null,
        'capability_drop' => null,
        'ulimits' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'image' => false,
        'labels' => false,
        'command' => false,
        'args' => false,
        'hostname' => false,
        'env' => false,
        'dir' => false,
        'user' => false,
        'groups' => false,
        'privileges' => false,
        'tty' => false,
        'open_stdin' => false,
        'read_only' => false,
        'mounts' => false,
        'stop_signal' => false,
        'stop_grace_period' => false,
        'health_check' => false,
        'hosts' => false,
        'dns_config' => false,
        'secrets' => false,
        'configs' => false,
        'isolation' => false,
        'init' => true,
        'sysctls' => false,
        'capability_add' => false,
        'capability_drop' => false,
        'ulimits' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image' => 'Image',
        'labels' => 'Labels',
        'command' => 'Command',
        'args' => 'Args',
        'hostname' => 'Hostname',
        'env' => 'Env',
        'dir' => 'Dir',
        'user' => 'User',
        'groups' => 'Groups',
        'privileges' => 'Privileges',
        'tty' => 'TTY',
        'open_stdin' => 'OpenStdin',
        'read_only' => 'ReadOnly',
        'mounts' => 'Mounts',
        'stop_signal' => 'StopSignal',
        'stop_grace_period' => 'StopGracePeriod',
        'health_check' => 'HealthCheck',
        'hosts' => 'Hosts',
        'dns_config' => 'DNSConfig',
        'secrets' => 'Secrets',
        'configs' => 'Configs',
        'isolation' => 'Isolation',
        'init' => 'Init',
        'sysctls' => 'Sysctls',
        'capability_add' => 'CapabilityAdd',
        'capability_drop' => 'CapabilityDrop',
        'ulimits' => 'Ulimits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image' => 'setImage',
        'labels' => 'setLabels',
        'command' => 'setCommand',
        'args' => 'setArgs',
        'hostname' => 'setHostname',
        'env' => 'setEnv',
        'dir' => 'setDir',
        'user' => 'setUser',
        'groups' => 'setGroups',
        'privileges' => 'setPrivileges',
        'tty' => 'setTty',
        'open_stdin' => 'setOpenStdin',
        'read_only' => 'setReadOnly',
        'mounts' => 'setMounts',
        'stop_signal' => 'setStopSignal',
        'stop_grace_period' => 'setStopGracePeriod',
        'health_check' => 'setHealthCheck',
        'hosts' => 'setHosts',
        'dns_config' => 'setDnsConfig',
        'secrets' => 'setSecrets',
        'configs' => 'setConfigs',
        'isolation' => 'setIsolation',
        'init' => 'setInit',
        'sysctls' => 'setSysctls',
        'capability_add' => 'setCapabilityAdd',
        'capability_drop' => 'setCapabilityDrop',
        'ulimits' => 'setUlimits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image' => 'getImage',
        'labels' => 'getLabels',
        'command' => 'getCommand',
        'args' => 'getArgs',
        'hostname' => 'getHostname',
        'env' => 'getEnv',
        'dir' => 'getDir',
        'user' => 'getUser',
        'groups' => 'getGroups',
        'privileges' => 'getPrivileges',
        'tty' => 'getTty',
        'open_stdin' => 'getOpenStdin',
        'read_only' => 'getReadOnly',
        'mounts' => 'getMounts',
        'stop_signal' => 'getStopSignal',
        'stop_grace_period' => 'getStopGracePeriod',
        'health_check' => 'getHealthCheck',
        'hosts' => 'getHosts',
        'dns_config' => 'getDnsConfig',
        'secrets' => 'getSecrets',
        'configs' => 'getConfigs',
        'isolation' => 'getIsolation',
        'init' => 'getInit',
        'sysctls' => 'getSysctls',
        'capability_add' => 'getCapabilityAdd',
        'capability_drop' => 'getCapabilityDrop',
        'ulimits' => 'getUlimits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ISOLATION__DEFAULT = 'default';
    public const ISOLATION_PROCESS = 'process';
    public const ISOLATION_HYPERV = 'hyperv';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsolationAllowableValues()
    {
        return [
            self::ISOLATION__DEFAULT,
            self::ISOLATION_PROCESS,
            self::ISOLATION_HYPERV,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('command', $data ?? [], null);
        $this->setIfExists('args', $data ?? [], null);
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('env', $data ?? [], null);
        $this->setIfExists('dir', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('privileges', $data ?? [], null);
        $this->setIfExists('tty', $data ?? [], null);
        $this->setIfExists('open_stdin', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('mounts', $data ?? [], null);
        $this->setIfExists('stop_signal', $data ?? [], null);
        $this->setIfExists('stop_grace_period', $data ?? [], null);
        $this->setIfExists('health_check', $data ?? [], null);
        $this->setIfExists('hosts', $data ?? [], null);
        $this->setIfExists('dns_config', $data ?? [], null);
        $this->setIfExists('secrets', $data ?? [], null);
        $this->setIfExists('configs', $data ?? [], null);
        $this->setIfExists('isolation', $data ?? [], null);
        $this->setIfExists('init', $data ?? [], null);
        $this->setIfExists('sysctls', $data ?? [], null);
        $this->setIfExists('capability_add', $data ?? [], null);
        $this->setIfExists('capability_drop', $data ?? [], null);
        $this->setIfExists('ulimits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIsolationAllowableValues();
        if (!is_null($this->container['isolation']) && !in_array($this->container['isolation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isolation', must be one of '%s'",
                $this->container['isolation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image The image name to use for the container
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return array<string,string>|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param array<string,string>|null $labels User-defined key/value data.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets command
     *
     * @return string[]|null
     */
    public function getCommand()
    {
        return $this->container['command'];
    }

    /**
     * Sets command
     *
     * @param string[]|null $command The command to be run in the image.
     *
     * @return self
     */
    public function setCommand($command)
    {
        if (is_null($command)) {
            throw new \InvalidArgumentException('non-nullable command cannot be null');
        }
        $this->container['command'] = $command;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string[]|null
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string[]|null $args Arguments to the command.
     *
     * @return self
     */
    public function setArgs($args)
    {
        if (is_null($args)) {
            throw new \InvalidArgumentException('non-nullable args cannot be null');
        }
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string|null
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string|null $hostname The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets env
     *
     * @return string[]|null
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param string[]|null $env A list of environment variables in the form `VAR=value`.
     *
     * @return self
     */
    public function setEnv($env)
    {
        if (is_null($env)) {
            throw new \InvalidArgumentException('non-nullable env cannot be null');
        }
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets dir
     *
     * @return string|null
     */
    public function getDir()
    {
        return $this->container['dir'];
    }

    /**
     * Sets dir
     *
     * @param string|null $dir The working directory for commands to run in.
     *
     * @return self
     */
    public function setDir($dir)
    {
        if (is_null($dir)) {
            throw new \InvalidArgumentException('non-nullable dir cannot be null');
        }
        $this->container['dir'] = $dir;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user The user inside the container.
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[]|null $groups A list of additional groups that the container process will run as.
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets privileges
     *
     * @return \OpenAPI\Client\Model\TaskSpecContainerSpecPrivileges|null
     */
    public function getPrivileges()
    {
        return $this->container['privileges'];
    }

    /**
     * Sets privileges
     *
     * @param \OpenAPI\Client\Model\TaskSpecContainerSpecPrivileges|null $privileges privileges
     *
     * @return self
     */
    public function setPrivileges($privileges)
    {
        if (is_null($privileges)) {
            throw new \InvalidArgumentException('non-nullable privileges cannot be null');
        }
        $this->container['privileges'] = $privileges;

        return $this;
    }

    /**
     * Gets tty
     *
     * @return bool|null
     */
    public function getTty()
    {
        return $this->container['tty'];
    }

    /**
     * Sets tty
     *
     * @param bool|null $tty Whether a pseudo-TTY should be allocated.
     *
     * @return self
     */
    public function setTty($tty)
    {
        if (is_null($tty)) {
            throw new \InvalidArgumentException('non-nullable tty cannot be null');
        }
        $this->container['tty'] = $tty;

        return $this;
    }

    /**
     * Gets open_stdin
     *
     * @return bool|null
     */
    public function getOpenStdin()
    {
        return $this->container['open_stdin'];
    }

    /**
     * Sets open_stdin
     *
     * @param bool|null $open_stdin Open `stdin`
     *
     * @return self
     */
    public function setOpenStdin($open_stdin)
    {
        if (is_null($open_stdin)) {
            throw new \InvalidArgumentException('non-nullable open_stdin cannot be null');
        }
        $this->container['open_stdin'] = $open_stdin;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool|null
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool|null $read_only Mount the container's root filesystem as read only.
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {
        if (is_null($read_only)) {
            throw new \InvalidArgumentException('non-nullable read_only cannot be null');
        }
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets mounts
     *
     * @return \OpenAPI\Client\Model\Mount[]|null
     */
    public function getMounts()
    {
        return $this->container['mounts'];
    }

    /**
     * Sets mounts
     *
     * @param \OpenAPI\Client\Model\Mount[]|null $mounts Specification for mounts to be added to containers created as part of the service.
     *
     * @return self
     */
    public function setMounts($mounts)
    {
        if (is_null($mounts)) {
            throw new \InvalidArgumentException('non-nullable mounts cannot be null');
        }
        $this->container['mounts'] = $mounts;

        return $this;
    }

    /**
     * Gets stop_signal
     *
     * @return string|null
     */
    public function getStopSignal()
    {
        return $this->container['stop_signal'];
    }

    /**
     * Sets stop_signal
     *
     * @param string|null $stop_signal Signal to stop the container.
     *
     * @return self
     */
    public function setStopSignal($stop_signal)
    {
        if (is_null($stop_signal)) {
            throw new \InvalidArgumentException('non-nullable stop_signal cannot be null');
        }
        $this->container['stop_signal'] = $stop_signal;

        return $this;
    }

    /**
     * Gets stop_grace_period
     *
     * @return int|null
     */
    public function getStopGracePeriod()
    {
        return $this->container['stop_grace_period'];
    }

    /**
     * Sets stop_grace_period
     *
     * @param int|null $stop_grace_period Amount of time to wait for the container to terminate before forcefully killing it.
     *
     * @return self
     */
    public function setStopGracePeriod($stop_grace_period)
    {
        if (is_null($stop_grace_period)) {
            throw new \InvalidArgumentException('non-nullable stop_grace_period cannot be null');
        }
        $this->container['stop_grace_period'] = $stop_grace_period;

        return $this;
    }

    /**
     * Gets health_check
     *
     * @return \OpenAPI\Client\Model\HealthConfig|null
     */
    public function getHealthCheck()
    {
        return $this->container['health_check'];
    }

    /**
     * Sets health_check
     *
     * @param \OpenAPI\Client\Model\HealthConfig|null $health_check health_check
     *
     * @return self
     */
    public function setHealthCheck($health_check)
    {
        if (is_null($health_check)) {
            throw new \InvalidArgumentException('non-nullable health_check cannot be null');
        }
        $this->container['health_check'] = $health_check;

        return $this;
    }

    /**
     * Gets hosts
     *
     * @return string[]|null
     */
    public function getHosts()
    {
        return $this->container['hosts'];
    }

    /**
     * Sets hosts
     *
     * @param string[]|null $hosts A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...]
     *
     * @return self
     */
    public function setHosts($hosts)
    {
        if (is_null($hosts)) {
            throw new \InvalidArgumentException('non-nullable hosts cannot be null');
        }
        $this->container['hosts'] = $hosts;

        return $this;
    }

    /**
     * Gets dns_config
     *
     * @return \OpenAPI\Client\Model\TaskSpecContainerSpecDNSConfig|null
     */
    public function getDnsConfig()
    {
        return $this->container['dns_config'];
    }

    /**
     * Sets dns_config
     *
     * @param \OpenAPI\Client\Model\TaskSpecContainerSpecDNSConfig|null $dns_config dns_config
     *
     * @return self
     */
    public function setDnsConfig($dns_config)
    {
        if (is_null($dns_config)) {
            throw new \InvalidArgumentException('non-nullable dns_config cannot be null');
        }
        $this->container['dns_config'] = $dns_config;

        return $this;
    }

    /**
     * Gets secrets
     *
     * @return \OpenAPI\Client\Model\TaskSpecContainerSpecSecretsInner[]|null
     */
    public function getSecrets()
    {
        return $this->container['secrets'];
    }

    /**
     * Sets secrets
     *
     * @param \OpenAPI\Client\Model\TaskSpecContainerSpecSecretsInner[]|null $secrets Secrets contains references to zero or more secrets that will be exposed to the service.
     *
     * @return self
     */
    public function setSecrets($secrets)
    {
        if (is_null($secrets)) {
            throw new \InvalidArgumentException('non-nullable secrets cannot be null');
        }
        $this->container['secrets'] = $secrets;

        return $this;
    }

    /**
     * Gets configs
     *
     * @return \OpenAPI\Client\Model\TaskSpecContainerSpecConfigsInner[]|null
     */
    public function getConfigs()
    {
        return $this->container['configs'];
    }

    /**
     * Sets configs
     *
     * @param \OpenAPI\Client\Model\TaskSpecContainerSpecConfigsInner[]|null $configs Configs contains references to zero or more configs that will be exposed to the service.
     *
     * @return self
     */
    public function setConfigs($configs)
    {
        if (is_null($configs)) {
            throw new \InvalidArgumentException('non-nullable configs cannot be null');
        }
        $this->container['configs'] = $configs;

        return $this;
    }

    /**
     * Gets isolation
     *
     * @return string|null
     */
    public function getIsolation()
    {
        return $this->container['isolation'];
    }

    /**
     * Sets isolation
     *
     * @param string|null $isolation Isolation technology of the containers running the service. (Windows only)
     *
     * @return self
     */
    public function setIsolation($isolation)
    {
        if (is_null($isolation)) {
            throw new \InvalidArgumentException('non-nullable isolation cannot be null');
        }
        $allowedValues = $this->getIsolationAllowableValues();
        if (!in_array($isolation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isolation', must be one of '%s'",
                    $isolation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isolation'] = $isolation;

        return $this;
    }

    /**
     * Gets init
     *
     * @return bool|null
     */
    public function getInit()
    {
        return $this->container['init'];
    }

    /**
     * Sets init
     *
     * @param bool|null $init Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
     *
     * @return self
     */
    public function setInit($init)
    {
        if (is_null($init)) {
            array_push($this->openAPINullablesSetToNull, 'init');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('init', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['init'] = $init;

        return $this;
    }

    /**
     * Gets sysctls
     *
     * @return array<string,string>|null
     */
    public function getSysctls()
    {
        return $this->container['sysctls'];
    }

    /**
     * Sets sysctls
     *
     * @param array<string,string>|null $sysctls Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it's up to the user to determine whether a given sysctl will work properly in a Service.
     *
     * @return self
     */
    public function setSysctls($sysctls)
    {
        if (is_null($sysctls)) {
            throw new \InvalidArgumentException('non-nullable sysctls cannot be null');
        }
        $this->container['sysctls'] = $sysctls;

        return $this;
    }

    /**
     * Gets capability_add
     *
     * @return string[]|null
     */
    public function getCapabilityAdd()
    {
        return $this->container['capability_add'];
    }

    /**
     * Sets capability_add
     *
     * @param string[]|null $capability_add A list of kernel capabilities to add to the default set for the container.
     *
     * @return self
     */
    public function setCapabilityAdd($capability_add)
    {
        if (is_null($capability_add)) {
            throw new \InvalidArgumentException('non-nullable capability_add cannot be null');
        }
        $this->container['capability_add'] = $capability_add;

        return $this;
    }

    /**
     * Gets capability_drop
     *
     * @return string[]|null
     */
    public function getCapabilityDrop()
    {
        return $this->container['capability_drop'];
    }

    /**
     * Sets capability_drop
     *
     * @param string[]|null $capability_drop A list of kernel capabilities to drop from the default set for the container.
     *
     * @return self
     */
    public function setCapabilityDrop($capability_drop)
    {
        if (is_null($capability_drop)) {
            throw new \InvalidArgumentException('non-nullable capability_drop cannot be null');
        }
        $this->container['capability_drop'] = $capability_drop;

        return $this;
    }

    /**
     * Gets ulimits
     *
     * @return \OpenAPI\Client\Model\ResourcesUlimitsInner[]|null
     */
    public function getUlimits()
    {
        return $this->container['ulimits'];
    }

    /**
     * Sets ulimits
     *
     * @param \OpenAPI\Client\Model\ResourcesUlimitsInner[]|null $ulimits A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"
     *
     * @return self
     */
    public function setUlimits($ulimits)
    {
        if (is_null($ulimits)) {
            throw new \InvalidArgumentException('non-nullable ulimits cannot be null');
        }
        $this->container['ulimits'] = $ulimits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


