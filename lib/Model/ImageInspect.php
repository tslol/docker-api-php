<?php
/**
 * ImageInspect
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.44) is used. For example, calling `/info` is the same as calling `/v1.44/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.44
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageInspect Class Doc Comment
 *
 * @category Class
 * @description Information about an image in the local image cache.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImageInspect implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageInspect';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'repo_tags' => 'string[]',
        'repo_digests' => 'string[]',
        'parent' => 'string',
        'comment' => 'string',
        'created' => 'string',
        'container' => 'string',
        'container_config' => '\OpenAPI\Client\Model\ContainerConfig',
        'docker_version' => 'string',
        'author' => 'string',
        'config' => '\OpenAPI\Client\Model\ContainerConfig',
        'architecture' => 'string',
        'variant' => 'string',
        'os' => 'string',
        'os_version' => 'string',
        'size' => 'int',
        'virtual_size' => 'int',
        'graph_driver' => '\OpenAPI\Client\Model\GraphDriverData',
        'root_fs' => '\OpenAPI\Client\Model\ImageInspectRootFS',
        'metadata' => '\OpenAPI\Client\Model\ImageInspectMetadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'repo_tags' => null,
        'repo_digests' => null,
        'parent' => null,
        'comment' => null,
        'created' => null,
        'container' => null,
        'container_config' => null,
        'docker_version' => null,
        'author' => null,
        'config' => null,
        'architecture' => null,
        'variant' => null,
        'os' => null,
        'os_version' => null,
        'size' => 'int64',
        'virtual_size' => 'int64',
        'graph_driver' => null,
        'root_fs' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'repo_tags' => false,
        'repo_digests' => false,
        'parent' => false,
        'comment' => false,
        'created' => false,
        'container' => false,
        'container_config' => false,
        'docker_version' => false,
        'author' => false,
        'config' => false,
        'architecture' => false,
        'variant' => true,
        'os' => false,
        'os_version' => true,
        'size' => false,
        'virtual_size' => false,
        'graph_driver' => false,
        'root_fs' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'repo_tags' => 'RepoTags',
        'repo_digests' => 'RepoDigests',
        'parent' => 'Parent',
        'comment' => 'Comment',
        'created' => 'Created',
        'container' => 'Container',
        'container_config' => 'ContainerConfig',
        'docker_version' => 'DockerVersion',
        'author' => 'Author',
        'config' => 'Config',
        'architecture' => 'Architecture',
        'variant' => 'Variant',
        'os' => 'Os',
        'os_version' => 'OsVersion',
        'size' => 'Size',
        'virtual_size' => 'VirtualSize',
        'graph_driver' => 'GraphDriver',
        'root_fs' => 'RootFS',
        'metadata' => 'Metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'repo_tags' => 'setRepoTags',
        'repo_digests' => 'setRepoDigests',
        'parent' => 'setParent',
        'comment' => 'setComment',
        'created' => 'setCreated',
        'container' => 'setContainer',
        'container_config' => 'setContainerConfig',
        'docker_version' => 'setDockerVersion',
        'author' => 'setAuthor',
        'config' => 'setConfig',
        'architecture' => 'setArchitecture',
        'variant' => 'setVariant',
        'os' => 'setOs',
        'os_version' => 'setOsVersion',
        'size' => 'setSize',
        'virtual_size' => 'setVirtualSize',
        'graph_driver' => 'setGraphDriver',
        'root_fs' => 'setRootFs',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'repo_tags' => 'getRepoTags',
        'repo_digests' => 'getRepoDigests',
        'parent' => 'getParent',
        'comment' => 'getComment',
        'created' => 'getCreated',
        'container' => 'getContainer',
        'container_config' => 'getContainerConfig',
        'docker_version' => 'getDockerVersion',
        'author' => 'getAuthor',
        'config' => 'getConfig',
        'architecture' => 'getArchitecture',
        'variant' => 'getVariant',
        'os' => 'getOs',
        'os_version' => 'getOsVersion',
        'size' => 'getSize',
        'virtual_size' => 'getVirtualSize',
        'graph_driver' => 'getGraphDriver',
        'root_fs' => 'getRootFs',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('repo_tags', $data ?? [], null);
        $this->setIfExists('repo_digests', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('container', $data ?? [], null);
        $this->setIfExists('container_config', $data ?? [], null);
        $this->setIfExists('docker_version', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('architecture', $data ?? [], null);
        $this->setIfExists('variant', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('os_version', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('virtual_size', $data ?? [], null);
        $this->setIfExists('graph_driver', $data ?? [], null);
        $this->setIfExists('root_fs', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets repo_tags
     *
     * @return string[]|null
     */
    public function getRepoTags()
    {
        return $this->container['repo_tags'];
    }

    /**
     * Sets repo_tags
     *
     * @param string[]|null $repo_tags List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID.
     *
     * @return self
     */
    public function setRepoTags($repo_tags)
    {
        if (is_null($repo_tags)) {
            throw new \InvalidArgumentException('non-nullable repo_tags cannot be null');
        }
        $this->container['repo_tags'] = $repo_tags;

        return $this;
    }

    /**
     * Gets repo_digests
     *
     * @return string[]|null
     */
    public function getRepoDigests()
    {
        return $this->container['repo_digests'];
    }

    /**
     * Sets repo_digests
     *
     * @param string[]|null $repo_digests List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated.
     *
     * @return self
     */
    public function setRepoDigests($repo_digests)
    {
        if (is_null($repo_digests)) {
            throw new \InvalidArgumentException('non-nullable repo_digests cannot be null');
        }
        $this->container['repo_digests'] = $repo_digests;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return string|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param string|null $parent ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry.
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            throw new \InvalidArgumentException('non-nullable parent cannot be null');
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Optional message that was set when committing or importing the image.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created Date and time at which the image was created, formatted in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets container
     *
     * @return string|null
     */
    public function getContainer()
    {
        return $this->container['container'];
    }

    /**
     * Sets container
     *
     * @param string|null $container The ID of the container that was used to create the image.  Depending on how the image was created, this field may be empty.  **Deprecated**: this field is kept for backward compatibility, but will be removed in API v1.45.
     *
     * @return self
     */
    public function setContainer($container)
    {
        if (is_null($container)) {
            throw new \InvalidArgumentException('non-nullable container cannot be null');
        }
        $this->container['container'] = $container;

        return $this;
    }

    /**
     * Gets container_config
     *
     * @return \OpenAPI\Client\Model\ContainerConfig|null
     */
    public function getContainerConfig()
    {
        return $this->container['container_config'];
    }

    /**
     * Sets container_config
     *
     * @param \OpenAPI\Client\Model\ContainerConfig|null $container_config container_config
     *
     * @return self
     */
    public function setContainerConfig($container_config)
    {
        if (is_null($container_config)) {
            throw new \InvalidArgumentException('non-nullable container_config cannot be null');
        }
        $this->container['container_config'] = $container_config;

        return $this;
    }

    /**
     * Gets docker_version
     *
     * @return string|null
     */
    public function getDockerVersion()
    {
        return $this->container['docker_version'];
    }

    /**
     * Sets docker_version
     *
     * @param string|null $docker_version The version of Docker that was used to build the image.  Depending on how the image was created, this field may be empty.
     *
     * @return self
     */
    public function setDockerVersion($docker_version)
    {
        if (is_null($docker_version)) {
            throw new \InvalidArgumentException('non-nullable docker_version cannot be null');
        }
        $this->container['docker_version'] = $docker_version;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author Name of the author that was specified when committing the image, or as specified through MAINTAINER (deprecated) in the Dockerfile.
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (is_null($author)) {
            throw new \InvalidArgumentException('non-nullable author cannot be null');
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \OpenAPI\Client\Model\ContainerConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \OpenAPI\Client\Model\ContainerConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets architecture
     *
     * @return string|null
     */
    public function getArchitecture()
    {
        return $this->container['architecture'];
    }

    /**
     * Sets architecture
     *
     * @param string|null $architecture Hardware CPU architecture that the image runs on.
     *
     * @return self
     */
    public function setArchitecture($architecture)
    {
        if (is_null($architecture)) {
            throw new \InvalidArgumentException('non-nullable architecture cannot be null');
        }
        $this->container['architecture'] = $architecture;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return string|null
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param string|null $variant CPU architecture variant (presently ARM-only).
     *
     * @return self
     */
    public function setVariant($variant)
    {
        if (is_null($variant)) {
            array_push($this->openAPINullablesSetToNull, 'variant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variant'] = $variant;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string|null $os Operating System the image is built to run on.
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets os_version
     *
     * @return string|null
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     *
     * @param string|null $os_version Operating System version the image is built to run on (especially for Windows).
     *
     * @return self
     */
    public function setOsVersion($os_version)
    {
        if (is_null($os_version)) {
            array_push($this->openAPINullablesSetToNull, 'os_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('os_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size Total size of the image including all layers it is composed of.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets virtual_size
     *
     * @return int|null
     */
    public function getVirtualSize()
    {
        return $this->container['virtual_size'];
    }

    /**
     * Sets virtual_size
     *
     * @param int|null $virtual_size Total size of the image including all layers it is composed of.  Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
     *
     * @return self
     */
    public function setVirtualSize($virtual_size)
    {
        if (is_null($virtual_size)) {
            throw new \InvalidArgumentException('non-nullable virtual_size cannot be null');
        }
        $this->container['virtual_size'] = $virtual_size;

        return $this;
    }

    /**
     * Gets graph_driver
     *
     * @return \OpenAPI\Client\Model\GraphDriverData|null
     */
    public function getGraphDriver()
    {
        return $this->container['graph_driver'];
    }

    /**
     * Sets graph_driver
     *
     * @param \OpenAPI\Client\Model\GraphDriverData|null $graph_driver graph_driver
     *
     * @return self
     */
    public function setGraphDriver($graph_driver)
    {
        if (is_null($graph_driver)) {
            throw new \InvalidArgumentException('non-nullable graph_driver cannot be null');
        }
        $this->container['graph_driver'] = $graph_driver;

        return $this;
    }

    /**
     * Gets root_fs
     *
     * @return \OpenAPI\Client\Model\ImageInspectRootFS|null
     */
    public function getRootFs()
    {
        return $this->container['root_fs'];
    }

    /**
     * Sets root_fs
     *
     * @param \OpenAPI\Client\Model\ImageInspectRootFS|null $root_fs root_fs
     *
     * @return self
     */
    public function setRootFs($root_fs)
    {
        if (is_null($root_fs)) {
            throw new \InvalidArgumentException('non-nullable root_fs cannot be null');
        }
        $this->container['root_fs'] = $root_fs;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\ImageInspectMetadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\ImageInspectMetadata|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


