<?php
/**
 * NetworkSettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.44) is used. For example, calling `/info` is the same as calling `/v1.44/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.44
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkSettings Class Doc Comment
 *
 * @category Class
 * @description NetworkSettings exposes the network settings in the API
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NetworkSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NetworkSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bridge' => 'string',
        'sandbox_id' => 'string',
        'hairpin_mode' => 'bool',
        'link_local_ipv6_address' => 'string',
        'link_local_ipv6_prefix_len' => 'int',
        'ports' => 'array<string,\OpenAPI\Client\Model\PortBinding[]>',
        'sandbox_key' => 'string',
        'secondary_ip_addresses' => '\OpenAPI\Client\Model\Address[]',
        'secondary_ipv6_addresses' => '\OpenAPI\Client\Model\Address[]',
        'endpoint_id' => 'string',
        'gateway' => 'string',
        'global_ipv6_address' => 'string',
        'global_ipv6_prefix_len' => 'int',
        'ip_address' => 'string',
        'ip_prefix_len' => 'int',
        'ipv6_gateway' => 'string',
        'mac_address' => 'string',
        'networks' => 'array<string,\OpenAPI\Client\Model\EndpointSettings>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bridge' => null,
        'sandbox_id' => null,
        'hairpin_mode' => null,
        'link_local_ipv6_address' => null,
        'link_local_ipv6_prefix_len' => null,
        'ports' => null,
        'sandbox_key' => null,
        'secondary_ip_addresses' => null,
        'secondary_ipv6_addresses' => null,
        'endpoint_id' => null,
        'gateway' => null,
        'global_ipv6_address' => null,
        'global_ipv6_prefix_len' => null,
        'ip_address' => null,
        'ip_prefix_len' => null,
        'ipv6_gateway' => null,
        'mac_address' => null,
        'networks' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bridge' => false,
        'sandbox_id' => false,
        'hairpin_mode' => false,
        'link_local_ipv6_address' => false,
        'link_local_ipv6_prefix_len' => false,
        'ports' => false,
        'sandbox_key' => false,
        'secondary_ip_addresses' => true,
        'secondary_ipv6_addresses' => true,
        'endpoint_id' => false,
        'gateway' => false,
        'global_ipv6_address' => false,
        'global_ipv6_prefix_len' => false,
        'ip_address' => false,
        'ip_prefix_len' => false,
        'ipv6_gateway' => false,
        'mac_address' => false,
        'networks' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bridge' => 'Bridge',
        'sandbox_id' => 'SandboxID',
        'hairpin_mode' => 'HairpinMode',
        'link_local_ipv6_address' => 'LinkLocalIPv6Address',
        'link_local_ipv6_prefix_len' => 'LinkLocalIPv6PrefixLen',
        'ports' => 'Ports',
        'sandbox_key' => 'SandboxKey',
        'secondary_ip_addresses' => 'SecondaryIPAddresses',
        'secondary_ipv6_addresses' => 'SecondaryIPv6Addresses',
        'endpoint_id' => 'EndpointID',
        'gateway' => 'Gateway',
        'global_ipv6_address' => 'GlobalIPv6Address',
        'global_ipv6_prefix_len' => 'GlobalIPv6PrefixLen',
        'ip_address' => 'IPAddress',
        'ip_prefix_len' => 'IPPrefixLen',
        'ipv6_gateway' => 'IPv6Gateway',
        'mac_address' => 'MacAddress',
        'networks' => 'Networks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bridge' => 'setBridge',
        'sandbox_id' => 'setSandboxId',
        'hairpin_mode' => 'setHairpinMode',
        'link_local_ipv6_address' => 'setLinkLocalIpv6Address',
        'link_local_ipv6_prefix_len' => 'setLinkLocalIpv6PrefixLen',
        'ports' => 'setPorts',
        'sandbox_key' => 'setSandboxKey',
        'secondary_ip_addresses' => 'setSecondaryIpAddresses',
        'secondary_ipv6_addresses' => 'setSecondaryIpv6Addresses',
        'endpoint_id' => 'setEndpointId',
        'gateway' => 'setGateway',
        'global_ipv6_address' => 'setGlobalIpv6Address',
        'global_ipv6_prefix_len' => 'setGlobalIpv6PrefixLen',
        'ip_address' => 'setIpAddress',
        'ip_prefix_len' => 'setIpPrefixLen',
        'ipv6_gateway' => 'setIpv6Gateway',
        'mac_address' => 'setMacAddress',
        'networks' => 'setNetworks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bridge' => 'getBridge',
        'sandbox_id' => 'getSandboxId',
        'hairpin_mode' => 'getHairpinMode',
        'link_local_ipv6_address' => 'getLinkLocalIpv6Address',
        'link_local_ipv6_prefix_len' => 'getLinkLocalIpv6PrefixLen',
        'ports' => 'getPorts',
        'sandbox_key' => 'getSandboxKey',
        'secondary_ip_addresses' => 'getSecondaryIpAddresses',
        'secondary_ipv6_addresses' => 'getSecondaryIpv6Addresses',
        'endpoint_id' => 'getEndpointId',
        'gateway' => 'getGateway',
        'global_ipv6_address' => 'getGlobalIpv6Address',
        'global_ipv6_prefix_len' => 'getGlobalIpv6PrefixLen',
        'ip_address' => 'getIpAddress',
        'ip_prefix_len' => 'getIpPrefixLen',
        'ipv6_gateway' => 'getIpv6Gateway',
        'mac_address' => 'getMacAddress',
        'networks' => 'getNetworks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bridge', $data ?? [], null);
        $this->setIfExists('sandbox_id', $data ?? [], null);
        $this->setIfExists('hairpin_mode', $data ?? [], null);
        $this->setIfExists('link_local_ipv6_address', $data ?? [], null);
        $this->setIfExists('link_local_ipv6_prefix_len', $data ?? [], null);
        $this->setIfExists('ports', $data ?? [], null);
        $this->setIfExists('sandbox_key', $data ?? [], null);
        $this->setIfExists('secondary_ip_addresses', $data ?? [], null);
        $this->setIfExists('secondary_ipv6_addresses', $data ?? [], null);
        $this->setIfExists('endpoint_id', $data ?? [], null);
        $this->setIfExists('gateway', $data ?? [], null);
        $this->setIfExists('global_ipv6_address', $data ?? [], null);
        $this->setIfExists('global_ipv6_prefix_len', $data ?? [], null);
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('ip_prefix_len', $data ?? [], null);
        $this->setIfExists('ipv6_gateway', $data ?? [], null);
        $this->setIfExists('mac_address', $data ?? [], null);
        $this->setIfExists('networks', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bridge
     *
     * @return string|null
     */
    public function getBridge()
    {
        return $this->container['bridge'];
    }

    /**
     * Sets bridge
     *
     * @param string|null $bridge Name of the default bridge interface when dockerd's --bridge flag is set.
     *
     * @return self
     */
    public function setBridge($bridge)
    {
        if (is_null($bridge)) {
            throw new \InvalidArgumentException('non-nullable bridge cannot be null');
        }
        $this->container['bridge'] = $bridge;

        return $this;
    }

    /**
     * Gets sandbox_id
     *
     * @return string|null
     */
    public function getSandboxId()
    {
        return $this->container['sandbox_id'];
    }

    /**
     * Sets sandbox_id
     *
     * @param string|null $sandbox_id SandboxID uniquely represents a container's network stack.
     *
     * @return self
     */
    public function setSandboxId($sandbox_id)
    {
        if (is_null($sandbox_id)) {
            throw new \InvalidArgumentException('non-nullable sandbox_id cannot be null');
        }
        $this->container['sandbox_id'] = $sandbox_id;

        return $this;
    }

    /**
     * Gets hairpin_mode
     *
     * @return bool|null
     */
    public function getHairpinMode()
    {
        return $this->container['hairpin_mode'];
    }

    /**
     * Sets hairpin_mode
     *
     * @param bool|null $hairpin_mode Indicates if hairpin NAT should be enabled on the virtual interface.  Deprecated: This field is never set and will be removed in a future release.
     *
     * @return self
     */
    public function setHairpinMode($hairpin_mode)
    {
        if (is_null($hairpin_mode)) {
            throw new \InvalidArgumentException('non-nullable hairpin_mode cannot be null');
        }
        $this->container['hairpin_mode'] = $hairpin_mode;

        return $this;
    }

    /**
     * Gets link_local_ipv6_address
     *
     * @return string|null
     */
    public function getLinkLocalIpv6Address()
    {
        return $this->container['link_local_ipv6_address'];
    }

    /**
     * Sets link_local_ipv6_address
     *
     * @param string|null $link_local_ipv6_address IPv6 unicast address using the link-local prefix.  Deprecated: This field is never set and will be removed in a future release.
     *
     * @return self
     */
    public function setLinkLocalIpv6Address($link_local_ipv6_address)
    {
        if (is_null($link_local_ipv6_address)) {
            throw new \InvalidArgumentException('non-nullable link_local_ipv6_address cannot be null');
        }
        $this->container['link_local_ipv6_address'] = $link_local_ipv6_address;

        return $this;
    }

    /**
     * Gets link_local_ipv6_prefix_len
     *
     * @return int|null
     */
    public function getLinkLocalIpv6PrefixLen()
    {
        return $this->container['link_local_ipv6_prefix_len'];
    }

    /**
     * Sets link_local_ipv6_prefix_len
     *
     * @param int|null $link_local_ipv6_prefix_len Prefix length of the IPv6 unicast address.  Deprecated: This field is never set and will be removed in a future release.
     *
     * @return self
     */
    public function setLinkLocalIpv6PrefixLen($link_local_ipv6_prefix_len)
    {
        if (is_null($link_local_ipv6_prefix_len)) {
            throw new \InvalidArgumentException('non-nullable link_local_ipv6_prefix_len cannot be null');
        }
        $this->container['link_local_ipv6_prefix_len'] = $link_local_ipv6_prefix_len;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return array<string,\OpenAPI\Client\Model\PortBinding[]>|null
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param array<string,\OpenAPI\Client\Model\PortBinding[]>|null $ports PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for multiple protocols, separate entries are added to the mapping table.
     *
     * @return self
     */
    public function setPorts($ports)
    {
        if (is_null($ports)) {
            throw new \InvalidArgumentException('non-nullable ports cannot be null');
        }
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets sandbox_key
     *
     * @return string|null
     */
    public function getSandboxKey()
    {
        return $this->container['sandbox_key'];
    }

    /**
     * Sets sandbox_key
     *
     * @param string|null $sandbox_key SandboxKey is the full path of the netns handle
     *
     * @return self
     */
    public function setSandboxKey($sandbox_key)
    {
        if (is_null($sandbox_key)) {
            throw new \InvalidArgumentException('non-nullable sandbox_key cannot be null');
        }
        $this->container['sandbox_key'] = $sandbox_key;

        return $this;
    }

    /**
     * Gets secondary_ip_addresses
     *
     * @return \OpenAPI\Client\Model\Address[]|null
     */
    public function getSecondaryIpAddresses()
    {
        return $this->container['secondary_ip_addresses'];
    }

    /**
     * Sets secondary_ip_addresses
     *
     * @param \OpenAPI\Client\Model\Address[]|null $secondary_ip_addresses Deprecated: This field is never set and will be removed in a future release.
     *
     * @return self
     */
    public function setSecondaryIpAddresses($secondary_ip_addresses)
    {
        if (is_null($secondary_ip_addresses)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_ip_addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_ip_addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_ip_addresses'] = $secondary_ip_addresses;

        return $this;
    }

    /**
     * Gets secondary_ipv6_addresses
     *
     * @return \OpenAPI\Client\Model\Address[]|null
     */
    public function getSecondaryIpv6Addresses()
    {
        return $this->container['secondary_ipv6_addresses'];
    }

    /**
     * Sets secondary_ipv6_addresses
     *
     * @param \OpenAPI\Client\Model\Address[]|null $secondary_ipv6_addresses Deprecated: This field is never set and will be removed in a future release.
     *
     * @return self
     */
    public function setSecondaryIpv6Addresses($secondary_ipv6_addresses)
    {
        if (is_null($secondary_ipv6_addresses)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_ipv6_addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_ipv6_addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['secondary_ipv6_addresses'] = $secondary_ipv6_addresses;

        return $this;
    }

    /**
     * Gets endpoint_id
     *
     * @return string|null
     */
    public function getEndpointId()
    {
        return $this->container['endpoint_id'];
    }

    /**
     * Sets endpoint_id
     *
     * @param string|null $endpoint_id EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return self
     */
    public function setEndpointId($endpoint_id)
    {
        if (is_null($endpoint_id)) {
            throw new \InvalidArgumentException('non-nullable endpoint_id cannot be null');
        }
        $this->container['endpoint_id'] = $endpoint_id;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string|null
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string|null $gateway Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return self
     */
    public function setGateway($gateway)
    {
        if (is_null($gateway)) {
            throw new \InvalidArgumentException('non-nullable gateway cannot be null');
        }
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets global_ipv6_address
     *
     * @return string|null
     */
    public function getGlobalIpv6Address()
    {
        return $this->container['global_ipv6_address'];
    }

    /**
     * Sets global_ipv6_address
     *
     * @param string|null $global_ipv6_address Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return self
     */
    public function setGlobalIpv6Address($global_ipv6_address)
    {
        if (is_null($global_ipv6_address)) {
            throw new \InvalidArgumentException('non-nullable global_ipv6_address cannot be null');
        }
        $this->container['global_ipv6_address'] = $global_ipv6_address;

        return $this;
    }

    /**
     * Gets global_ipv6_prefix_len
     *
     * @return int|null
     */
    public function getGlobalIpv6PrefixLen()
    {
        return $this->container['global_ipv6_prefix_len'];
    }

    /**
     * Sets global_ipv6_prefix_len
     *
     * @param int|null $global_ipv6_prefix_len Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return self
     */
    public function setGlobalIpv6PrefixLen($global_ipv6_prefix_len)
    {
        if (is_null($global_ipv6_prefix_len)) {
            throw new \InvalidArgumentException('non-nullable global_ipv6_prefix_len cannot be null');
        }
        $this->container['global_ipv6_prefix_len'] = $global_ipv6_prefix_len;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets ip_prefix_len
     *
     * @return int|null
     */
    public function getIpPrefixLen()
    {
        return $this->container['ip_prefix_len'];
    }

    /**
     * Sets ip_prefix_len
     *
     * @param int|null $ip_prefix_len Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return self
     */
    public function setIpPrefixLen($ip_prefix_len)
    {
        if (is_null($ip_prefix_len)) {
            throw new \InvalidArgumentException('non-nullable ip_prefix_len cannot be null');
        }
        $this->container['ip_prefix_len'] = $ip_prefix_len;

        return $this;
    }

    /**
     * Gets ipv6_gateway
     *
     * @return string|null
     */
    public function getIpv6Gateway()
    {
        return $this->container['ipv6_gateway'];
    }

    /**
     * Sets ipv6_gateway
     *
     * @param string|null $ipv6_gateway IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return self
     */
    public function setIpv6Gateway($ipv6_gateway)
    {
        if (is_null($ipv6_gateway)) {
            throw new \InvalidArgumentException('non-nullable ipv6_gateway cannot be null');
        }
        $this->container['ipv6_gateway'] = $ipv6_gateway;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string|null
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string|null $mac_address MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return self
     */
    public function setMacAddress($mac_address)
    {
        if (is_null($mac_address)) {
            throw new \InvalidArgumentException('non-nullable mac_address cannot be null');
        }
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return array<string,\OpenAPI\Client\Model\EndpointSettings>|null
     */
    public function getNetworks()
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param array<string,\OpenAPI\Client\Model\EndpointSettings>|null $networks Information about all networks that the container is connected to.
     *
     * @return self
     */
    public function setNetworks($networks)
    {
        if (is_null($networks)) {
            throw new \InvalidArgumentException('non-nullable networks cannot be null');
        }
        $this->container['networks'] = $networks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


